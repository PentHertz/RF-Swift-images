name: SDR full - Multi-Platform Docker Build with Caching

env:
  REGISTRY_IMAGE: penthertz/rfswiftdevgh
  CACHE_REPO: penthertz/rfswiftdevgh
  DO_SPACES_ENDPOINT: ${{ secrets.BUCKET_URL }}
  DO_SPACES_REGION: ${{ secrets.BUCKET_REGION }}

on:
  push:
    branches:
      - main

jobs:
  corebuild:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        platform: [amd64, arm64, riscv64]
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          install: true
          version: latest

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push corebuild image with caching
        run: |
          cd Dockerfiles
          ARCH=${{ env.BUILD_PLATFORMS }} CACHE_REPO=${{ env.CACHE_REPO }} REGISTRY_IMAGE=${{ env.REGISTRY_IMAGE }} make common

  sdrsa_devices:
    runs-on: ubuntu-latest
    needs: corebuild
    strategy:
      matrix:
        platform: [amd64, arm64, riscv64]
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          install: true

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push sdr_light image with caching
        run: |
          cd Dockerfiles
          ARCH=${{ env.BUILD_PLATFORMS }} CACHE_REPO=${{ env.CACHE_REPO }} \
          REGISTRY_IMAGE=${{ env.REGISTRY_IMAGE }} UHD_BASE=uhd RTLSDR_BASE=rtlsdr make sdrsadevices 

  sdrsa_devices_antsdr:
    runs-on: ubuntu-latest
    needs: corebuild
    strategy:
      matrix:
        platform: [amd64, arm64, riscv64]
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          install: true

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push sdr_light image with caching
        run: |
          cd Dockerfiles
          ARCH=${{ env.BUILD_PLATFORMS }} CACHE_REPO=${{ env.CACHE_REPO }} \
          REGISTRY_IMAGE=${{ env.REGISTRY_IMAGE }} UHD_BASE=antsdr_uhd RTLSDR_BASE=rtlsdr make sdrsadevices 

  sdrsa_devices_rtlsdrv4:
    runs-on: ubuntu-latest
    needs: corebuild
    strategy:
      matrix:
        platform: [amd64, arm64, riscv64]
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          install: true

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push sdr_light image with caching
        run: |
          cd Dockerfiles
          ARCH=${{ env.BUILD_PLATFORMS }} CACHE_REPO=${{ env.CACHE_REPO }} \
          REGISTRY_IMAGE=${{ env.REGISTRY_IMAGE }} UHD_BASE=uhd RTLSDR_BASE=rtlsdrv4 make sdrsadevices 

  sdr_light:
    runs-on: ubuntu-latest
    needs: corebuild
    strategy:
      matrix:
        platform: [amd64, arm64, riscv64]
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          install: true

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push sdr_light image with caching
        run: |
          cd Dockerfiles
          ARCH=${{ env.BUILD_PLATFORMS }} CACHE_REPO=${{ env.CACHE_REPO }} \
          REGISTRY_IMAGE=${{ env.REGISTRY_IMAGE }} make sdrlight 

  extraoot:
    runs-on: ubuntu-latest
    needs: sdr_light
    strategy:
      matrix:
        platform: [amd64, arm64, riscv64]
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          install: true

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push sdr_full image with caching
        run: |
          cd Dockerfiles
          ARCH=${{ env.BUILD_PLATFORMS }} CACHE_REPO=${{ env.CACHE_REPO }} REGISTRY_IMAGE=${{ env.REGISTRY_IMAGE }} make sdrfull1

  extrasoft:
    runs-on: ubuntu-latest
    needs: sdr_light
    strategy:
      matrix:
        platform: [amd64, arm64, riscv64]
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          install: true

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push sdr_full image with caching
        run: |
          ARCH=${{ env.BUILD_PLATFORMS }} CACHE_REPO=${{ env.CACHE_REPO }} REGISTRY_IMAGE=${{ env.REGISTRY_IMAGE }} make sdrfull2

  mldlsofts:
    runs-on: ubuntu-latest
    needs: sdr_light
    strategy:
      matrix:
        platform: [amd64, arm64, riscv64]
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          install: true

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push sdr_full image with caching
        run: |
          cd Dockerfiles
          ARCH=${{ env.BUILD_PLATFORMS }} CACHE_REPO=${{ env.CACHE_REPO }} REGISTRY_IMAGE=${{ env.REGISTRY_IMAGE }} make sdrfull3

  telecom:
    runs-on: ubuntu-latest
    needs: sdr_light
    strategy:
      matrix:
        platform: [amd64, arm64, riscv64]
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          install: true

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push telecom image with caching
        run: |
          cd Dockerfiles
          ARCH=${{ env.BUILD_PLATFORMS }} CACHE_REPO=${{ env.CACHE_REPO }} \
          REGISTRY_IMAGE=${{ env.REGISTRY_IMAGE }} make telecom

  wifi:
    runs-on: ubuntu-latest
    needs: sdr_light
    strategy:
      matrix:
        platform: [amd64, arm64, riscv64]
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          install: true

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push wifi image with caching
        run: |
          cd Dockerfiles
          ARCH=${{ env.BUILD_PLATFORMS }} CACHE_REPO=${{ env.CACHE_REPO }} \
          REGISTRY_IMAGE=${{ env.REGISTRY_IMAGE }} make wifi

  bluetooth:
    runs-on: ubuntu-latest
    needs: sdr_light
    strategy:
      matrix:
        platform: [amd64, arm64, riscv64]
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          install: true

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push bluetooth image with caching
        run: |
          cd Dockerfiles
          ARCH=${{ env.BUILD_PLATFORMS }} CACHE_REPO=${{ env.CACHE_REPO }} \
          REGISTRY_IMAGE=${{ env.REGISTRY_IMAGE }} make bluetooth

  rfid:
    runs-on: ubuntu-latest
    needs: corebuild
    strategy:
      matrix:
        platform: [amd64, arm64, riscv64]
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          install: true

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push rfid image with caching
        run: |
          cd Dockerfiles
          ARCH=${{ env.BUILD_PLATFORMS }} CACHE_REPO=${{ env.CACHE_REPO }} \
          REGISTRY_IMAGE=${{ env.REGISTRY_IMAGE }} make rfid

  automotive:
    runs-on: ubuntu-latest
    needs: corebuild
    strategy:
      matrix:
        platform: [amd64, arm64, riscv64]
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          install: true

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push automotive image with caching
        run: |
          cd Dockerfiles
          ARCH=${{ env.BUILD_PLATFORMS }} CACHE_REPO=${{ env.CACHE_REPO }} \
          REGISTRY_IMAGE=${{ env.REGISTRY_IMAGE }} make automotive

  reversing:
    runs-on: ubuntu-latest
    needs: corebuild
    strategy:
      matrix:
        platform: [amd64, arm64, riscv64]
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          install: true

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push reversing image with caching
        run: |
          cd Dockerfiles
          ARCH=${{ env.BUILD_PLATFORMS }} CACHE_REPO=${{ env.CACHE_REPO }} \
          REGISTRY_IMAGE=${{ env.REGISTRY_IMAGE }} make reversing