name: SDR full - Multi-Platform Docker Build with Caching

env:
  REGISTRY_IMAGE: penthertz/rfswiftdevgh
  CACHE_REPO: penthertz/rfswiftdevgh
  DO_SPACES_ENDPOINT: ${{ secrets.BUCKET_URL }}
  DO_SPACES_REGION: ${{ secrets.BUCKET_REGION }}

on:
  push:
    branches:
      - main

jobs:
  corebuild:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        platform: [linux/amd64, linux/arm64, linux/riscv64]
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          install: true
          version: latest

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push corebuild image with caching
        run: |
          cd Dockerfiles
          TAG_PLATFORM=$(echo "${{ matrix.platform }}_corebuild" | tr '/' '_' | tr '-' '_')
          docker buildx build --platform ${{ matrix.platform }} \
            --build-arg ARCH=${{ matrix.platform }} \
            --cache-from type=registry,ref=${{ env.CACHE_REPO }}:${TAG_PLATFORM} \
            --cache-to type=registry,ref=${{ env.CACHE_REPO }}:${TAG_PLATFORM},mode=max \
            --push -t ${{ env.REGISTRY_IMAGE }}:${TAG_PLATFORM} \
            -f SDR/corebuild.docker \
            ..

  sdr_light:
    runs-on: ubuntu-latest
    needs: corebuild
    strategy:
      matrix:
        platform: [linux/amd64, linux/arm64, linux/riscv64]
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          install: true

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push sdr_light image with caching
        run: |
          cd Dockerfiles
          TAG_PLATFORM=$(echo "${{ matrix.platform }}_sdrlight" | tr '/' '_' | tr '-' '_')
          docker buildx build --platform ${{ matrix.platform }} \
            --build-arg ARCH=${{ matrix.platform }} \
            --build-arg BASE_IMAGE=${{ env.REGISTRY_IMAGE }}:corebuild \
            --build-arg UHD_BASE=${{ env.UHD_BASE }} \
            --build-arg RTLSDR_BASE=${{ env.RTLSDR_BASE }} \
            --cache-from type=registry,ref=${{ env.CACHE_REPO }}:${TAG_PLATFORM} \
            --cache-to type=registry,ref=${{ env.CACHE_REPO }}:${TAG_PLATFORM},mode=max \
            --push -t ${{ env.REGISTRY_IMAGE }}:${TAG_PLATFORM} \
            -f SDR/sdr_light.docker \
            ..

  extraoot:
    runs-on: ubuntu-latest
    needs: sdr_light
    strategy:
      matrix:
        platform: [linux/amd64, linux/arm64, linux/riscv64]
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          install: true

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push sdr_full image with caching
        run: |
          cd Dockerfiles
          TAG_PLATFORM=$(echo "${{ matrix.platform }}_sdrfull" | tr '/' '_' | tr '-' '_')
          docker buildx build --platform ${{ matrix.platform }} \
            --build-arg ARCH=${{ matrix.platform }} \
            --build-arg BASE_IMAGE=${{ env.REGISTRY_IMAGE }}:sdr_light \
            --cache-from type=registry,ref=${{ env.CACHE_REPO }}:${TAG_PLATFORM} \
            --cache-to type=registry,ref=${{ env.CACHE_REPO }}:${TAG_PLATFORM},mode=max \
            --push -t ${{ env.REGISTRY_IMAGE }}:${TAG_PLATFORM} \
            --target extraoot \
            -f SDR/sdr_full.docker \
            ..

  extrasoft:
    runs-on: ubuntu-latest
    needs: sdr_light
    strategy:
      matrix:
        platform: [linux/amd64, linux/arm64, linux/riscv64]
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          install: true

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push sdr_full image with caching
        run: |
          cd Dockerfiles
          TAG_PLATFORM=$(echo "${{ matrix.platform }}_sdrfull" | tr '/' '_' | tr '-' '_')
          docker buildx build --platform ${{ matrix.platform }} \
            --build-arg ARCH=${{ matrix.platform }} \
            --build-arg BASE_IMAGE=${{ env.REGISTRY_IMAGE }}:sdr_light \
            --cache-from type=registry,ref=${{ env.CACHE_REPO }}:${TAG_PLATFORM} \
            --cache-to type=registry,ref=${{ env.CACHE_REPO }}:${TAG_PLATFORM},mode=max \
            --push -t ${{ env.REGISTRY_IMAGE }}:${TAG_PLATFORM} \
            --target extrasoft \
            -f SDR/sdr_full.docker \
            ..

  mldlsofts:
    runs-on: ubuntu-latest
    needs: sdr_light
    strategy:
      matrix:
        platform: [linux/amd64, linux/arm64, linux/riscv64]
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          install: true

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push sdr_full image with caching
        run: |
          cd Dockerfiles
          TAG_PLATFORM=$(echo "${{ matrix.platform }}_sdrfull" | tr '/' '_' | tr '-' '_')
          docker buildx build --platform ${{ matrix.platform }} \
            --build-arg ARCH=${{ matrix.platform }} \
            --build-arg BASE_IMAGE=${{ env.REGISTRY_IMAGE }}:sdr_light \
            --cache-from type=registry,ref=${{ env.CACHE_REPO }}:${TAG_PLATFORM} \
            --cache-to type=registry,ref=${{ env.CACHE_REPO }}:${TAG_PLATFORM},mode=max \
            --push -t ${{ env.REGISTRY_IMAGE }}:${TAG_PLATFORM} \
            -f SDR/sdr_full.docker \
            ..

  sdr_light_antsdr:
    runs-on: ubuntu-latest
    needs: corebuild
    strategy:
      matrix:
        platform: [linux/amd64, linux/arm64, linux/riscv64]
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          install: true

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push sdr_light_antsdr image with caching
        run: |
          cd Dockerfiles
          TAG_PLATFORM=$(echo "${{ matrix.platform }}_sdrlightantsdr" | tr '/' '_' | tr '-' '_')
          docker buildx build --platform ${{ matrix.platform }} \
            --build-arg ARCH=${{ matrix.platform }} \
            --build-arg BASE_IMAGE=${{ env.REGISTRY_IMAGE }}:corebuild \
            --build-arg UHD_BASE=antsdr_uhd \
            --build-arg RTLSDR_BASE=rtlsdr \
            --cache-from type=registry,ref=${{ env.CACHE_REPO }}:${TAG_PLATFORM} \
            --cache-to type=registry,ref=${{ env.CACHE_REPO }}:${TAG_PLATFORM},mode=max \
            --push -t ${{ env.REGISTRY_IMAGE }}:${TAG_PLATFORM} \
            -f SDR/sdr_light.docker \
            ..

  sdr_light_rtlsdrv4:
    runs-on: ubuntu-latest
    needs: corebuild
    strategy:
      matrix:
        platform: [linux/amd64, linux/arm64, linux/riscv64]
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          install: true

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push sdr_light_rtlsdrv4 image with caching
        run: |
          cd Dockerfiles
          TAG_PLATFORM=$(echo "${{ matrix.platform }}_sdrlightrtlsdrv4" | tr '/' '_' | tr '-' '_')
          docker buildx build --platform ${{ matrix.platform }} \
            --build-arg ARCH=${{ matrix.platform }} \
            --build-arg BASE_IMAGE=${{ env.REGISTRY_IMAGE }}:corebuild \
            --build-arg UHD_BASE=uhd \
            --build-arg RTLSDR_BASE=rtlsdrv4 \
            --cache-from type=registry,ref=${{ env.CACHE_REPO }}:${TAG_PLATFORM} \
            --cache-to type=registry,ref=${{ env.CACHE_REPO }}:${TAG_PLATFORM},mode=max \
            --push -t ${{ env.REGISTRY_IMAGE }}:${TAG_PLATFORM} \
            -f SDR/sdr_light.docker \
            ..

  telecom:
    runs-on: ubuntu-latest
    needs: sdr_light
    strategy:
      matrix:
        platform: [linux/amd64, linux/arm64, linux/riscv64]
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          install: true

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push telecom image with caching
        run: |
          cd Dockerfiles
          TAG_PLATFORM=$(echo "${{ matrix.platform }}_telecom" | tr '/' '_' | tr '-' '_')
          docker buildx build --platform ${{ matrix.platform }} \
            --build-arg ARCH=${{ matrix.platform }} \
            --build-arg BASE_IMAGE=${{ env.REGISTRY_IMAGE }}:sdr_light \
            --cache-from type=registry,ref=${{ env.CACHE_REPO }}:${TAG_PLATFORM} \
            --cache-to type=registry,ref=${{ env.CACHE_REPO }}:${TAG_PLATFORM},mode=max \
            --push -t ${{ env.REGISTRY_IMAGE }}:${TAG_PLATFORM} \
            -f telecom.docker \
            ..

  wifi:
    runs-on: ubuntu-latest
    needs: sdr_light
    strategy:
      matrix:
        platform: [linux/amd64, linux/arm64, linux/riscv64]
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          install: true

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push wifi image with caching
        run: |
          cd Dockerfiles
          TAG_PLATFORM=$(echo "${{ matrix.platform }}_wifi" | tr '/' '_' | tr '-' '_')
          docker buildx build --platform ${{ matrix.platform }} \
            --build-arg ARCH=${{ matrix.platform }} \
            --build-arg BASE_IMAGE=${{ env.REGISTRY_IMAGE }}:sdr_light \
            --cache-from type=registry,ref=${{ env.CACHE_REPO }}:${TAG_PLATFORM} \
            --cache-to type=registry,ref=${{ env.CACHE_REPO }}:${TAG_PLATFORM},mode=max \
            --push -t ${{ env.REGISTRY_IMAGE }}:${TAG_PLATFORM} \
            -f wifi.docker \
            ..

  bluetooth:
    runs-on: ubuntu-latest
    needs: sdr_light
    strategy:
      matrix:
        platform: [linux/amd64, linux/arm64, linux/riscv64]
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          install: true

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push bluetooth image with caching
        run: |
          cd Dockerfiles
          TAG_PLATFORM=$(echo "${{ matrix.platform }}_bluetooth" | tr '/' '_' | tr '-' '_')
          docker buildx build --platform ${{ matrix.platform }} \
            --build-arg ARCH=${{ matrix.platform }} \
            --build-arg BASE_IMAGE=${{ env.REGISTRY_IMAGE }}:corebuild \
            --cache-from type=registry,ref=${{ env.CACHE_REPO }}:${TAG_PLATFORM} \
            --cache-to type=registry,ref=${{ env.CACHE_REPO }}:${TAG_PLATFORM},mode=max \
            --push -t ${{ env.REGISTRY_IMAGE }}:${TAG_PLATFORM} \
            -f bluetooth.docker \
            ..

  rfid:
    runs-on: ubuntu-latest
    needs: corebuild
    strategy:
      matrix:
        platform: [linux/amd64, linux/arm64, linux/riscv64]
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          install: true

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push rfid image with caching
        run: |
          cd Dockerfiles
          TAG_PLATFORM=$(echo "${{ matrix.platform }}_rfid" | tr '/' '_' | tr '-' '_')
          docker buildx build --platform ${{ matrix.platform }} \
            --build-arg ARCH=${{ matrix.platform }} \
            --build-arg BASE_IMAGE=${{ env.REGISTRY_IMAGE }}:corebuild \
            --cache-from type=registry,ref=${{ env.CACHE_REPO }}:${TAG_PLATFORM} \
            --cache-to type=registry,ref=${{ env.CACHE_REPO }}:${TAG_PLATFORM},mode=max \
            --push -t ${{ env.REGISTRY_IMAGE }}:${TAG_PLATFORM} \
            -f rfid.docker \
            ..

  automotive:
    runs-on: ubuntu-latest
    needs: corebuild
    strategy:
      matrix:
        platform: [linux/amd64, linux/arm64, linux/riscv64]
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          install: true

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push automotive image with caching
        run: |
          cd Dockerfiles
          TAG_PLATFORM=$(echo "${{ matrix.platform }}_automotive" | tr '/' '_' | tr '-' '_')
          docker buildx build --platform ${{ matrix.platform }} \
            --build-arg ARCH=${{ matrix.platform }} \
            --build-arg BASE_IMAGE=${{ env.REGISTRY_IMAGE }}:corebuild \
            --cache-from type=registry,ref=${{ env.CACHE_REPO }}:${TAG_PLATFORM} \
            --cache-to type=registry,ref=${{ env.CACHE_REPO }}:${TAG_PLATFORM},mode=max \
            --push -t ${{ env.REGISTRY_IMAGE }}:${TAG_PLATFORM} \
            -f automotive.docker \
            ..

  reversing:
    runs-on: ubuntu-latest
    needs: corebuild
    strategy:
      matrix:
        platform: [linux/amd64, linux/arm64, linux/riscv64]
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          install: true

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push reversing image with caching
        run: |
          cd Dockerfiles
          TAG_PLATFORM=$(echo "${{ matrix.platform }}_reversing" | tr '/' '_' | tr '-' '_')
          docker buildx build --platform ${{ matrix.platform }} \
            --build-arg ARCH=${{ matrix.platform }} \
            --build-arg BASE_IMAGE=${{ env.REGISTRY_IMAGE }}:corebuild \
            --cache-from type=registry,ref=${{ env.CACHE_REPO }}:${TAG_PLATFORM} \
            --cache-to type=registry,ref=${{ env.CACHE_REPO }}:${TAG_PLATFORM},mode=max \
            --push -t ${{ env.REGISTRY_IMAGE }}:${TAG_PLATFORM} \
            -f reversing.docker \
            ..