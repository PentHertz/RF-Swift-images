name: SDR full - Multi-Platform Docker Build with Caching

env:
  REGISTRY_IMAGE: penthertz/rfswiftdevgh
  CACHE_REPO: penthertz/rfswiftdevgh
  DO_SPACES_ENDPOINT: ${{ secrets.BUCKET_URL }}
  DO_SPACES_REGION: ${{ secrets.BUCKET_REGION }}

on:
  push:
    branches:
      - main

jobs:
  corebuild:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        platform: [linux/amd64, linux/arm64, linux/riscv64]
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          install: true
          version: latest

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push corebuild image with caching
        run: |
          cd Dockerfiles
          docker buildx build --platform ${{ matrix.platform }} \
            --build-arg ARCH=${{ matrix.platform }} \
            --cache-from type=registry,ref=${{ env.CACHE_REPO }}:${{ matrix.platform }}-corebuild \
            --cache-to type=registry,ref=${{ env.CACHE_REPO }}:${{ matrix.platform }}-corebuild,mode=max \
            --push -t ${{ env.REGISTRY_IMAGE }}:corebuild-${{ matrix.platform }} .

  sdr_light:
    runs-on: ubuntu-latest
    needs: corebuild
    strategy:
      matrix:
        platform: [linux/amd64, linux/arm64, linux/riscv64]
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          install: true

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push sdr_light image with caching
        run: |
          cd Dockerfiles
          docker buildx build --platform ${{ matrix.platform }} \
            --build-arg ARCH=${{ matrix.platform }} \
            --cache-from type=registry,ref=${{ env.CACHE_REPO }}:${{ matrix.platform }}-sdrlight \
            --cache-to type=registry,ref=${{ env.CACHE_REPO }}:${{ matrix.platform }}-sdrlight,mode=max \
            --push -t ${{ env.REGISTRY_IMAGE }}:sdrlight-${{ matrix.platform }} .

  extraoot:
    runs-on: ubuntu-latest
    needs: sdr_light
    strategy:
      matrix:
        platform: [linux/amd64, linux/arm64, linux/riscv64]
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          install: true

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push sdr_full image with caching
        run: |
          cd Dockerfiles
          docker buildx build --platform ${{ matrix.platform }} \
            --build-arg ARCH=${{ matrix.platform }} \
            --cache-from type=registry,ref=${{ env.CACHE_REPO }}:${{ matrix.platform }}-sdrfull \
            --cache-to type=registry,ref=${{ env.CACHE_REPO }}:${{ matrix.platform }}-sdrfull,mode=max \
            --push -t ${{ env.REGISTRY_IMAGE }}:sdrfull-${{ matrix.platform }} .

  extrasoft:
    runs-on: ubuntu-latest
    needs: sdr_light
    strategy:
      matrix:
        platform: [linux/amd64, linux/arm64, linux/riscv64]
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          install: true

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push sdr_full image with caching
        run: |
          cd Dockerfiles
          docker buildx build --platform ${{ matrix.platform }} \
            --build-arg ARCH=${{ matrix.platform }} \
            --cache-from type=registry,ref=${{ env.CACHE_REPO }}:${{ matrix.platform }}-sdrfull \
            --cache-to type=registry,ref=${{ env.CACHE_REPO }}:${{ matrix.platform }}-sdrfull,mode=max \
            --push -t ${{ env.REGISTRY_IMAGE }}:sdrfull-${{ matrix.platform }} .

  mldlsofts:
    runs-on: ubuntu-latest
    needs: sdr_light
    strategy:
      matrix:
        platform: [linux/amd64, linux/arm64, linux/riscv64]
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          install: true

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push sdr_full image with caching
        run: |
          cd Dockerfiles
          docker buildx build --platform ${{ matrix.platform }} \
            --build-arg ARCH=${{ matrix.platform }} \
            --cache-from type=registry,ref=${{ env.CACHE_REPO }}:${{ matrix.platform }}-sdrfull \
            --cache-to type=registry,ref=${{ env.CACHE_REPO }}:${{ matrix.platform }}-sdrfull,mode=max \
            --push -t ${{ env.REGISTRY_IMAGE }}:sdrfull-${{ matrix.platform }} .

  sdr_light_antsdr:
    runs-on: ubuntu-latest
    needs: corebuild
    strategy:
      matrix:
        platform: [linux/amd64, linux/arm64, linux/riscv64]
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          install: true

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push sdr_light_antsdr image with caching
        run: |
          cd Dockerfiles
          docker buildx build --platform ${{ matrix.platform }} \
            --build-arg ARCH=${{ matrix.platform }} \
            --cache-from type=registry,ref=${{ env.CACHE_REPO }}:${{ matrix.platform }}-sdrlightantsdr \
            --cache-to type=registry,ref=${{ env.CACHE_REPO }}:${{ matrix.platform }}-sdrlightantsdr,mode=max \
            --push -t ${{ env.REGISTRY_IMAGE }}:sdrlightantsdr-${{ matrix.platform }} .

  sdr_light_rtlsdrv4:
    runs-on: ubuntu-latest
    needs: corebuild
    strategy:
      matrix:
        platform: [linux/amd64, linux/arm64, linux/riscv64]
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          install: true

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push sdr_light_rtlsdrv4 image with caching
        run: |
          cd Dockerfiles
          docker buildx build --platform ${{ matrix.platform }} \
            --build-arg ARCH=${{ matrix.platform }} \
            --cache-from type=registry,ref=${{ env.CACHE_REPO }}:${{ matrix.platform }}-sdrlightrtlsdrv4 \
            --cache-to type=registry,ref=${{ env.CACHE_REPO }}:${{ matrix.platform }}-sdrlightrtlsdrv4,mode=max \
            --push -t ${{ env.REGISTRY_IMAGE }}:sdrlightrtlsdrv4-${{ matrix.platform }} .

  telecom:
    runs-on: ubuntu-latest
    needs: sdr_light
    strategy:
      matrix:
        platform: [linux/amd64, linux/arm64, linux/riscv64]
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          install: true

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push telecom image with caching
        run: |
          cd Dockerfiles
          docker buildx build --platform ${{ matrix.platform }} \
            --build-arg ARCH=${{ matrix.platform }} \
            --cache-from type=registry,ref=${{ env.CACHE_REPO }}:${{ matrix.platform }}-telecom \
            --cache-to type=registry,ref=${{ env.CACHE_REPO }}:${{ matrix.platform }}-telecom,mode=max \
            --push -t ${{ env.REGISTRY_IMAGE }}:telecom-${{ matrix.platform }} .

  wifi:
    runs-on: ubuntu-latest
    needs: sdr_light
    strategy:
      matrix:
        platform: [linux/amd64, linux/arm64, linux/riscv64]
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          install: true

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push wifi image with caching
        run: |
          cd Dockerfiles
          docker buildx build --platform ${{ matrix.platform }} \
            --build-arg ARCH=${{ matrix.platform }} \
            --cache-from type=registry,ref=${{ env.CACHE_REPO }}:${{ matrix.platform }}-wifi \
            --cache-to type=registry,ref=${{ env.CACHE_REPO }}:${{ matrix.platform }}-wifi,mode=max \
            --push -t ${{ env.REGISTRY_IMAGE }}:wifi-${{ matrix.platform }} .

  bluetooth:
    runs-on: ubuntu-latest
    needs: sdr_light
    strategy:
      matrix:
        platform: [linux/amd64, linux/arm64, linux/riscv64]
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          install: true

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push bluetooth image with caching
        run: |
          cd Dockerfiles
          docker buildx build --platform ${{ matrix.platform }} \
            --build-arg ARCH=${{ matrix.platform }} \
            --cache-from type=registry,ref=${{ env.CACHE_REPO }}:${{ matrix.platform }}-bluetooth \
            --cache-to type=registry,ref=${{ env.CACHE_REPO }}:${{ matrix.platform }}-bluetooth,mode=max \
            --push -t ${{ env.REGISTRY_IMAGE }}:bluetooth-${{ matrix.platform }} .

  rfid:
    runs-on: ubuntu-latest
    needs: corebuild
    strategy:
      matrix:
        platform: [linux/amd64, linux/arm64, linux/riscv64]
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          install: true

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push rfid image with caching
        run: |
          cd Dockerfiles
          docker buildx build --platform ${{ matrix.platform }} \
            --build-arg ARCH=${{ matrix.platform }} \
            --cache-from type=registry,ref=${{ env.CACHE_REPO }}:${{ matrix.platform }}-rfid \
            --cache-to type=registry,ref=${{ env.CACHE_REPO }}:${{ matrix.platform }}-rfid,mode=max \
            --push -t ${{ env.REGISTRY_IMAGE }}:rfid-${{ matrix.platform }} .

  automotive:
    runs-on: ubuntu-latest
    needs: corebuild
    strategy:
      matrix:
        platform: [linux/amd64, linux/arm64, linux/riscv64]
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          install: true

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push automotive image with caching
        run: |
          cd Dockerfiles
          docker buildx build --platform ${{ matrix.platform }} \
            --build-arg ARCH=${{ matrix.platform }} \
            --cache-from type=registry,ref=${{ env.CACHE_REPO }}:${{ matrix.platform }}-automotive \
            --cache-to type=registry,ref=${{ env.CACHE_REPO }}:${{ matrix.platform }}-automotive,mode=max \
            --push -t ${{ env.REGISTRY_IMAGE }}:automotive-${{ matrix.platform }} .

  reversing:
    runs-on: ubuntu-latest
    needs: corebuild
    strategy:
      matrix:
        platform: [linux/amd64, linux/arm64, linux/riscv64]
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          install: true

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push reversing image with caching
        run: |
          cd Dockerfiles
          docker buildx build --platform ${{ matrix.platform }} \
            --build-arg ARCH=${{ matrix.platform }} \
            --cache-from type=registry,ref=${{ env.CACHE_REPO }}:${{ matrix.platform }}-reversing \
            --cache-to type=registry,ref=${{ env.CACHE_REPO }}:${{ matrix.platform }}-reversing,mode=max \
            --push -t ${{ env.REGISTRY_IMAGE }}:reversing-${{ matrix.platform }} .