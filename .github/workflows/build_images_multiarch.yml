name: Full build - Multi-Platform Docker Build with Caching

env:
  REGISTRY_IMAGE: penthertz/rfswift
  CACHE_REPO: penthertz/rfswift
  DO_SPACES_ENDPOINT: ${{ secrets.BUCKET_URL }}
  DO_SPACES_REGION: ${{ secrets.BUCKET_REGION }}

on:
  push:
    branches:
      - main

jobs:
  corebuild:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        platform: [amd64, arm64, riscv64]
    if: contains(github.event.head_commit.message, 'Dockerfiles/Makefile') || contains(github.event.head_commit.message, 'config/') || contains(github.event.head_commit.message, 'rules/') || contains(github.event.head_commit.message, 'run/') || contains(github.event.head_commit.message, 'Dockerfiles/corebuild.docker') || contains(github.event.head_commit.message, 'scripts/common.sh') || contains(github.event.head_commit.message, 'scripts/entrypoint.sh') || contains(github.event.head_commit.message, 'scripts/corebuild.sh')
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          install: true
          version: latest

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push corebuild image with caching
        run: |
          cd Dockerfiles
          STORAGE_TYPE=registry ARCH=${{ matrix.platform }} CACHE_REPO=${{ env.CACHE_REPO }} REGISTRY_IMAGE=${{ env.REGISTRY_IMAGE }} make common

  corebuild-manifest:
    runs-on: ubuntu-latest
    needs: corebuild
    if: contains(github.event.head_commit.message, 'Dockerfiles/Makefile') || contains(github.event.head_commit.message, 'config/') || contains(github.event.head_commit.message, 'rules/') || contains(github.event.head_commit.message, 'run/') || contains(github.event.head_commit.message, 'Dockerfiles/corebuild.docker') || contains(github.event.head_commit.message, 'scripts/common.sh') || contains(github.event.head_commit.message, 'scripts/entrypoint.sh') || contains(github.event.head_commit.message, 'scripts/corebuild.sh')
    steps:
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          install: true
          version: latest

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Create and push multi-arch manifest for corebuild
        run: |
          tagname=corebuild

          # Inspect images for different architectures
          output_amd64=$(docker buildx imagetools inspect ${{ env.REGISTRY_IMAGE }}:${tagname}_amd64)
          output_arm64=$(docker buildx imagetools inspect ${{ env.REGISTRY_IMAGE }}:${tagname}_arm64)
          output_riscv64=$(docker buildx imagetools inspect ${{ env.REGISTRY_IMAGE }}:${tagname}_riscv64)

          # Extract the digests
          arch_digest_amd64=$(echo "$output_amd64" | grep "vnd.docker.reference.digest:" | awk '{print $2}')
          arch_digest_arm64=$(echo "$output_arm64" | grep "vnd.docker.reference.digest:" | awk '{print $2}')
          arch_digest_riscv64=$(echo "$output_riscv64" | grep "vnd.docker.reference.digest:" | awk '{print $2}')

          # Debug: Print the extracted digests
          echo "amd64 digest: $arch_digest_amd64"
          echo "arm64 digest: $arch_digest_arm64"
          echo "riscv64 digest: $arch_digest_riscv64"

          # Create and push the multi-arch manifest
          docker buildx imagetools create \
            --tag ${{ env.REGISTRY_IMAGE }}:$tagname \
            ${{ env.REGISTRY_IMAGE }}:${tagname}_amd64@$arch_digest_amd64 \
            ${{ env.REGISTRY_IMAGE }}:${tagname}_arm64@$arch_digest_arm64 \
            ${{ env.REGISTRY_IMAGE }}:${tagname}_riscv64@$arch_digest_riscv64

  sdrsa_devices:
    runs-on: ubuntu-latest
    needs: corebuild
    strategy:
      matrix:
        platform: [amd64, arm64, riscv64]
    if: contains(github.event.head_commit.message, 'Dockerfiles/Makefile') || contains(github.event.head_commit.message, 'config/') || contains(github.event.head_commit.message, 'rules/') || contains(github.event.head_commit.message, 'run/') || contains(github.event.head_commit.message, 'Dockerfiles/sdrsa_devices.docker') || contains(github.event.head_commit.message, 'scripts/common.sh') || contains(github.event.head_commit.message, 'scripts/entrypoint.sh') || contains(github.event.head_commit.message, 'scripts/sa_devices.sh') || contains(github.event.head_commit.message, 'scripts/sdr_peripherals.sh')
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          install: true

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push sdr_light image with caching
        run: |
          cd Dockerfiles
          STORAGE_TYPE=registry ARCH=${{ matrix.platform }} CACHE_REPO=${{ env.CACHE_REPO }} REGISTRY_IMAGE=${{ env.REGISTRY_IMAGE }} UHD_BASE=uhd RTLSDR_BASE=rtlsdr make sdrsadevices

  sdrsa_devices-manifest:
    runs-on: ubuntu-latest
    needs: sdrsa_devices
    if: contains(github.event.head_commit.message, 'Dockerfiles/Makefile') || contains(github.event.head_commit.message, 'config/') || contains(github.event.head_commit.message, 'rules/') || contains(github.event.head_commit.message, 'run/') || contains(github.event.head_commit.message, 'Dockerfiles/sdrsa_devices.docker') || contains(github.event.head_commit.message, 'scripts/common.sh') || contains(github.event.head_commit.message, 'scripts/entrypoint.sh') || contains(github.event.head_commit.message, 'scripts/sa_devices.sh') || contains(github.event.head_commit.message, 'scripts/sdr_peripherals.sh')
    steps:
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          install: true
          version: latest

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Create and push multi-arch manifest for sdrsa_devices
        run: |
          tagname=sdrsa_devices

          # Inspect images for different architectures
          output_amd64=$(docker buildx imagetools inspect ${{ env.REGISTRY_IMAGE }}:${tagname}_amd64)
          output_arm64=$(docker buildx imagetools inspect ${{ env.REGISTRY_IMAGE }}:${tagname}_arm64)
          output_riscv64=$(docker buildx imagetools inspect ${{ env.REGISTRY_IMAGE }}:${tagname}_riscv64)

          # Extract the digests
          arch_digest_amd64=$(echo "$output_amd64" | grep "vnd.docker.reference.digest:" | awk '{print $2}')
          arch_digest_arm64=$(echo "$output_arm64" | grep "vnd.docker.reference.digest:" | awk '{print $2}')
          arch_digest_riscv64=$(echo "$output_riscv64" | grep "vnd.docker.reference.digest:" | awk '{print $2}')

          # Debug: Print the extracted digests
          echo "amd64 digest: $arch_digest_amd64"
          echo "arm64 digest: $arch_digest_arm64"
          echo "riscv64 digest: $arch_digest_riscv64"

          # Create and push the multi-arch manifest
          docker buildx imagetools create \
            --tag ${{ env.REGISTRY_IMAGE }}:$tagname \
            ${{ env.REGISTRY_IMAGE }}:${tagname}_amd64@$arch_digest_amd64 \
            ${{ env.REGISTRY_IMAGE }}:${tagname}_arm64@$arch_digest_arm64 \
            ${{ env.REGISTRY_IMAGE }}:${tagname}_riscv64@$arch_digest_riscv64

  sdrsa_devices_antsdr:
    runs-on: ubuntu-latest
    needs: corebuild
    strategy:
      matrix:
        platform: [amd64, arm64, riscv64]
    if: contains(github.event.head_commit.message, 'Dockerfiles/Makefile') || contains(github.event.head_commit.message, 'config/') || contains(github.event.head_commit.message, 'rules/') || contains(github.event.head_commit.message, 'run/') || contains(github.event.head_commit.message, 'Dockerfiles/sdr_light_antsdr.docker') || contains(github.event.head_commit.message, 'scripts/common.sh') || contains(github.event.head_commit.message, 'scripts/entrypoint.sh') || contains(github.event.head_commit.message, 'scripts/sa_devices.sh') || contains(github.event.head_commit.message, 'scripts/sdr_peripherals.sh')
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          install: true

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push sdr_light image with caching
        run: |
          cd Dockerfiles
          STORAGE_TYPE=registry ARCH=${{ matrix.platform }} CACHE_REPO=${{ env.CACHE_REPO }} REGISTRY_IMAGE=${{ env.REGISTRY_IMAGE }} UHD_BASE=antsdr_uhd RTLSDR_BASE=rtlsdr make sdrsadevicesantsdr

  sdrsa_devices_antsdr-manifest:
    runs-on: ubuntu-latest
    needs: sdrsa_devices_antsdr
    if: contains(github.event.head_commit.message, 'Dockerfiles/Makefile') || contains(github.event.head_commit.message, 'config/') || contains(github.event.head_commit.message, 'rules/') || contains(github.event.head_commit.message, 'run/') || contains(github.event.head_commit.message, 'Dockerfiles/sdr_light_antsdr.docker') || contains(github.event.head_commit.message, 'scripts/common.sh') || contains(github.event.head_commit.message, 'scripts/entrypoint.sh') || contains(github.event.head_commit.message, 'scripts/sa_devices.sh') || contains(github.event.head_commit.message, 'scripts/sdr_peripherals.sh')
    steps:
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          install: true
          version: latest

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Create and push multi-arch manifest for sdrsa_devices_antsdr
        run: |
          tagname=sdrsa_devices_antsdr

          # Inspect images for different architectures
          output_amd64=$(docker buildx imagetools inspect ${{ env.REGISTRY_IMAGE }}:${tagname}_amd64)
          output_arm64=$(docker buildx imagetools inspect ${{ env.REGISTRY_IMAGE }}:${tagname}_arm64)
          output_riscv64=$(docker buildx imagetools inspect ${{ env.REGISTRY_IMAGE }}:${tagname}_riscv64)

          # Extract the digests
          arch_digest_amd64=$(echo "$output_amd64" | grep "vnd.docker.reference.digest:" | awk '{print $2}')
          arch_digest_arm64=$(echo "$output_arm64" | grep "vnd.docker.reference.digest:" | awk '{print $2}')
          arch_digest_riscv64=$(echo "$output_riscv64" | grep "vnd.docker.reference.digest:" | awk '{print $2}')

          # Debug: Print the extracted digests
          echo "amd64 digest: $arch_digest_amd64"
          echo "arm64 digest: $arch_digest_arm64"
          echo "riscv64 digest: $arch_digest_riscv64"

          # Create and push the multi-arch manifest
          docker buildx imagetools create \
            --tag ${{ env.REGISTRY_IMAGE }}:$tagname \
            ${{ env.REGISTRY_IMAGE }}:${tagname}_amd64@$arch_digest_amd64 \
            ${{ env.REGISTRY_IMAGE }}:${tagname}_arm64@$arch_digest_arm64 \
            ${{ env.REGISTRY_IMAGE }}:${tagname}_riscv64@$arch_digest_riscv64

  sdrsa_devices_rtlsdrv4:
    runs-on: ubuntu-latest
    needs: corebuild
    strategy:
      matrix:
        platform: [amd64, arm64, riscv64]
    if: contains(github.event.head_commit.message, 'Dockerfiles/Makefile') || contains(github.event.head_commit.message, 'config/') || contains(github.event.head_commit.message, 'rules/') || contains(github.event.head_commit.message, 'run/') || contains(github.event.head_commit.message, 'Dockerfiles/sdr_light_rtlsdrv4.docker') || contains(github.event.head_commit.message, 'scripts/common.sh') || contains(github.event.head_commit.message, 'scripts/entrypoint.sh') || contains(github.event.head_commit.message, 'scripts/sa_devices.sh') || contains(github.event.head_commit.message, 'scripts/sdr_peripherals.sh')
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          install: true

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push sdr_light image with caching
        run: |
          cd Dockerfiles
          STORAGE_TYPE=registry ARCH=${{ matrix.platform }} CACHE_REPO=${{ env.CACHE_REPO }} REGISTRY_IMAGE=${{ env.REGISTRY_IMAGE }} UHD_BASE=uhd RTLSDR_BASE=rtlsdrv4 make sdrsadevicesrtlsdrv4

  sdrsa_devices_rtlsdrv4-manifest:
    runs-on: ubuntu-latest
    needs: sdrsa_devices_rtlsdrv4
    if: contains(github.event.head_commit.message, 'Dockerfiles/Makefile') || contains(github.event.head_commit.message, 'config/') || contains(github.event.head_commit.message, 'rules/') || contains(github.event.head_commit.message, 'run/') || contains(github.event.head_commit.message, 'Dockerfiles/sdr_light_rtlsdrv4.docker') || contains(github.event.head_commit.message, 'scripts/common.sh') || contains(github.event.head_commit.message, 'scripts/entrypoint.sh') || contains(github.event.head_commit.message, 'scripts/sa_devices.sh') || contains(github.event.head_commit.message, 'scripts/sdr_peripherals.sh')
    steps:
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          install: true
          version: latest

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Create and push multi-arch manifest for sdrsa_devices_rtlsdrv4
        run: |
          tagname=sdrsa_devices_rtlsdrv4

          # Inspect images for different architectures
          output_amd64=$(docker buildx imagetools inspect ${{ env.REGISTRY_IMAGE }}:${tagname}_amd64)
          output_arm64=$(docker buildx imagetools inspect ${{ env.REGISTRY_IMAGE }}:${tagname}_arm64)
          output_riscv64=$(docker buildx imagetools inspect ${{ env.REGISTRY_IMAGE }}:${tagname}_riscv64)

          # Extract the digests
          arch_digest_amd64=$(echo "$output_amd64" | grep "vnd.docker.reference.digest:" | awk '{print $2}')
          arch_digest_arm64=$(echo "$output_arm64" | grep "vnd.docker.reference.digest:" | awk '{print $2}')
          arch_digest_riscv64=$(echo "$output_riscv64" | grep "vnd.docker.reference.digest:" | awk '{print $2}')

          # Debug: Print the extracted digests
          echo "amd64 digest: $arch_digest_amd64"
          echo "arm64 digest: $arch_digest_arm64"
          echo "riscv64 digest: $arch_digest_riscv64"

          # Create and push the multi-arch manifest
          docker buildx imagetools create \
            --tag ${{ env.REGISTRY_IMAGE }}:$tagname \
            ${{ env.REGISTRY_IMAGE }}:${tagname}_amd64@$arch_digest_amd64 \
            ${{ env.REGISTRY_IMAGE }}:${tagname}_arm64@$arch_digest_arm64 \
            ${{ env.REGISTRY_IMAGE }}:${tagname}_riscv64@$arch_digest_riscv64

  sdr_light:
    runs-on: ubuntu-latest
    needs: sdrsa_devices
    strategy:
      matrix:
        platform: [amd64, arm64, riscv64]
    if: contains(github.event.head_commit.message, 'Dockerfiles/Makefile') || contains(github.event.head_commit.message, 'config/') || contains(github.event.head_commit.message, 'rules/') || contains(github.event.head_commit.message, 'run/') || contains(github.event.head_commit.message, 'Dockerfiles/sdr_light.docker') || contains(github.event.head_commit.message, 'scripts/common.sh') || contains(github.event.head_commit.message, 'scripts/entrypoint.sh') || contains(github.event.head_commit.message, 'scripts/cal_devices.sh') || contains(github.event.head_commit.message, 'scripts/sdr_softwares.sh')
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          install: true

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push sdr_light image with caching
        run: |
          cd Dockerfiles
          STORAGE_TYPE=registry ARCH=${{ matrix.platform }} CACHE_REPO=${{ env.CACHE_REPO }} REGISTRY_IMAGE=${{ env.REGISTRY_IMAGE }} make sdrlight

  sdr_light-manifest:
    runs-on: ubuntu-latest
    needs: sdr_light
    if: contains(github.event.head_commit.message, 'Dockerfiles/Makefile') || contains(github.event.head_commit.message, 'config/') || contains(github.event.head_commit.message, 'rules/') || contains(github.event.head_commit.message, 'run/') || contains(github.event.head_commit.message, 'Dockerfiles/sdr_light.docker') || contains(github.event.head_commit.message, 'scripts/common.sh') || contains(github.event.head_commit.message, 'scripts/entrypoint.sh') || contains(github.event.head_commit.message, 'scripts/cal_devices.sh') || contains(github.event.head_commit.message, 'scripts/sdr_softwares.sh')
    steps:
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          install: true
          version: latest

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Create and push multi-arch manifest for sdr_light
        run: |
          tagname=sdr_light

          # Inspect images for different architectures
          output_amd64=$(docker buildx imagetools inspect ${{ env.REGISTRY_IMAGE }}:${tagname}_amd64)
          output_arm64=$(docker buildx imagetools inspect ${{ env.REGISTRY_IMAGE }}:${tagname}_arm64)
          output_riscv64=$(docker buildx imagetools inspect ${{ env.REGISTRY_IMAGE }}:${tagname}_riscv64)

          # Extract the digests
          arch_digest_amd64=$(echo "$output_amd64" | grep "vnd.docker.reference.digest:" | awk '{print $2}')
          arch_digest_arm64=$(echo "$output_arm64" | grep "vnd.docker.reference.digest:" | awk '{print $2}')
          arch_digest_riscv64=$(echo "$output_riscv64" | grep "vnd.docker.reference.digest:" | awk '{print $2}')

          # Debug: Print the extracted digests
          echo "amd64 digest: $arch_digest_amd64"
          echo "arm64 digest: $arch_digest_arm64"
          echo "riscv64 digest: $arch_digest_riscv64"

          # Create and push the multi-arch manifest
          docker buildx imagetools create \
            --tag ${{ env.REGISTRY_IMAGE }}:$tagname \
            ${{ env.REGISTRY_IMAGE }}:${tagname}_amd64@$arch_digest_amd64 \
            ${{ env.REGISTRY_IMAGE }}:${tagname}_arm64@$arch_digest_arm64 \
            ${{ env.REGISTRY_IMAGE }}:${tagname}_riscv64@$arch_digest_riscv64

  extraoot1:
    runs-on: ubuntu-latest
    needs: sdr_light
    strategy:
      matrix:
        platform: [amd64, arm64, riscv64]
    if: contains(github.event.head_commit.message, 'Dockerfiles/Makefile') || contains(github.event.head_commit.message, 'config/') || contains(github.event.head_commit.message, 'rules/') || contains(github.event.head_commit.message, 'run/') || contains(github.event.head_commit.message, 'Dockerfiles/sdr_light.docker') || contains(github.event.head_commit.message, 'scripts/common.sh') || contains(github.event.head_commit.message, 'scripts/entrypoint.sh') || contains(github.event.head_commit.message, 'scripts/gr_oot_modules.sh') || contains(github.event.head_commit.message, 'scripts/cal_devices.sh') || contains(github.event.head_commit.message, 'scripts/sdr_softwares.sh')
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          install: true

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push sdr_full extraoot1 image with caching
        run: |
          cd Dockerfiles
          STORAGE_TYPE=registry ARCH=${{ matrix.platform }} CACHE_REPO=${{ env.CACHE_REPO }} REGISTRY_IMAGE=${{ env.REGISTRY_IMAGE }} make sdrfull1

  extraoot2:
    runs-on: ubuntu-latest
    needs: sdr_light
    strategy:
      matrix:
        platform: [amd64, arm64, riscv64]
    if: contains(github.event.head_commit.message, 'Dockerfiles/Makefile') || contains(github.event.head_commit.message, 'config/') || contains(github.event.head_commit.message, 'rules/') || contains(github.event.head_commit.message, 'run/') || contains(github.event.head_commit.message, 'Dockerfiles/sdr_light.docker') || contains(github.event.head_commit.message, 'scripts/common.sh') || contains(github.event.head_commit.message, 'scripts/entrypoint.sh') || contains(github.event.head_commit.message, 'scripts/gr_oot_modules.sh') || contains(github.event.head_commit.message, 'scripts/cal_devices.sh') || contains(github.event.head_commit.message, 'scripts/sdr_softwares.sh')
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          install: true

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push sdr_full extraoot2 image with caching
        run: |
          cd Dockerfiles
          STORAGE_TYPE=registry ARCH=${{ matrix.platform }} CACHE_REPO=${{ env.CACHE_REPO }} REGISTRY_IMAGE=${{ env.REGISTRY_IMAGE }} make sdrfull2

  extrasoft:
    runs-on: ubuntu-latest
    needs: sdr_light
    strategy:
      matrix:
        platform: [amd64, arm64, riscv64]
    if: contains(github.event.head_commit.message, 'Dockerfiles/Makefile') || contains(github.event.head_commit.message, 'config/') || contains(github.event.head_commit.message, 'rules/') || contains(github.event.head_commit.message, 'run/') || contains(github.event.head_commit.message, 'Dockerfiles/sdr_full.docker') || contains(github.event.head_commit.message, 'scripts/common.sh') || contains(github.event.head_commit.message, 'scripts/entrypoint.sh') || contains(github.event.head_commit.message, 'scripts/gr_oot_modules.sh') || contains(github.event.head_commit.message, 'scripts/cal_devices.sh') || contains(github.event.head_commit.message, 'scripts/sdr_softwares.sh')
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          install: true

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push sdr_full extrasoft image with caching
        run: |
          cd Dockerfiles
          STORAGE_TYPE=registry ARCH=${{ matrix.platform }} CACHE_REPO=${{ env.CACHE_REPO }} REGISTRY_IMAGE=${{ env.REGISTRY_IMAGE }} make sdrfull3

  mldlsofts:
    runs-on: ubuntu-latest
    needs: sdr_light
    strategy:
      matrix:
        platform: [amd64, arm64, riscv64]
    if: contains(github.event.head_commit.message, 'Dockerfiles/Makefile') || contains(github.event.head_commit.message, 'config/') || contains(github.event.head_commit.message, 'rules/') || contains(github.event.head_commit.message, 'run/') || contains(github.event.head_commit.message, 'Dockerfiles/sdr_full.docker') || contains(github.event.head_commit.message, 'scripts/common.sh') || contains(github.event.head_commit.message, 'scripts/entrypoint.sh') || contains(github.event.head_commit.message, 'scripts/gr_oot_modules.sh') || contains(github.event.head_commit.message, 'scripts/cal_devices.sh') || contains(github.event.head_commit.message, 'scripts/sdr_softwares.sh') || contains(github.event.head_commit.message, 'scripts/lab_software.sh')
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          install: true

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push sdr_full mldlsofts image with caching
        run: |
          cd Dockerfiles
          STORAGE_TYPE=registry ARCH=${{ matrix.platform }} CACHE_REPO=${{ env.CACHE_REPO }} REGISTRY_IMAGE=${{ env.REGISTRY_IMAGE }} make sdrfull4

  telecom:
    runs-on: ubuntu-latest
    needs: sdrsa_devices
    strategy:
      matrix:
        platform: [amd64, arm64]
    if: contains(github.event.head_commit.message, 'Dockerfiles/Makefile') || contains(github.event.head_commit.message, 'config/') || contains(github.event.head_commit.message, 'rules/') || contains(github.event.head_commit.message, 'run/') || contains(github.event.head_commit.message, 'Dockerfiles/telecom.docker') || contains(github.event.head_commit.message, 'scripts/common.sh') || contains(github.event.head_commit.message, 'scripts/entrypoint.sh') || contains(github.event.head_commit.message, 'scripts/telecom_software.sh')
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          install: true

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push telecom image with caching
        run: |
          cd Dockerfiles
          STORAGE_TYPE=registry ARCH=${{ matrix.platform }} CACHE_REPO=${{ env.CACHE_REPO }} REGISTRY_IMAGE=${{ env.REGISTRY_IMAGE }} make telecom

  telecom-manifest:
    runs-on: ubuntu-latest
    needs: telecom
    if: contains(github.event.head_commit.message, 'Dockerfiles/Makefile') || contains(github.event.head_commit.message, 'config/') || contains(github.event.head_commit.message, 'rules/') || contains(github.event.head_commit.message, 'run/') || contains(github.event.head_commit.message, 'Dockerfiles/telecom.docker') || contains(github.event.head_commit.message, 'scripts/common.sh') || contains(github.event.head_commit.message, 'scripts/entrypoint.sh') || contains(github.event.head_commit.message, 'scripts/telecom_software.sh')
    steps:
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          install: true
          version: latest

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Create and push multi-arch manifest for telecom
        run: |
          tagname=telecom

          # Inspect images for different architectures
          output_amd64=$(docker buildx imagetools inspect ${{ env.REGISTRY_IMAGE }}:${tagname}_amd64)
          output_arm64=$(docker buildx imagetools inspect ${{ env.REGISTRY_IMAGE }}:${tagname}_arm64)

          # Extract the digests
          arch_digest_amd64=$(echo "$output_amd64" | grep "vnd.docker.reference.digest:" | awk '{print $2}')
          arch_digest_arm64=$(echo "$output_arm64" | grep "vnd.docker.reference.digest:" | awk '{print $2}')

          # Debug: Print the extracted digests
          echo "amd64 digest: $arch_digest_amd64"
          echo "arm64 digest: $arch_digest_arm64"
          echo "riscv64 digest: $arch_digest_riscv64"

          # Create and push the multi-arch manifest
          docker buildx imagetools create \
            --tag ${{ env.REGISTRY_IMAGE }}:$tagname \
            ${{ env.REGISTRY_IMAGE }}:${tagname}_amd64@$arch_digest_amd64 \
            ${{ env.REGISTRY_IMAGE }}:${tagname}_arm64@$arch_digest_arm64

  wifi:
    runs-on: ubuntu-latest
    needs: sdrsa_devices
    strategy:
      matrix:
        platform: [amd64, arm64, riscv64]
    if: contains(github.event.head_commit.message, 'Dockerfiles/Makefile') || contains(github.event.head_commit.message, 'config/') || contains(github.event.head_commit.message, 'rules/') || contains(github.event.head_commit.message, 'run/') || contains(github.event.head_commit.message, 'Dockerfiles/wifi.docker') || contains(github.event.head_commit.message, 'scripts/common.sh') || contains(github.event.head_commit.message, 'scripts/entrypoint.sh') || contains(github.event.head_commit.message, 'scripts/rf_tools.sh')
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          install: true

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push wifi image with caching
        run: |
          cd Dockerfiles
          STORAGE_TYPE=registry ARCH=${{ matrix.platform }} CACHE_REPO=${{ env.CACHE_REPO }} REGISTRY_IMAGE=${{ env.REGISTRY_IMAGE }} make wifi

  wifi-manifest:
    runs-on: ubuntu-latest
    needs: wifi
    if: contains(github.event.head_commit.message, 'Dockerfiles/Makefile') || contains(github.event.head_commit.message, 'config/') || contains(github.event.head_commit.message, 'rules/') || contains(github.event.head_commit.message, 'run/') || contains(github.event.head_commit.message, 'Dockerfiles/wifi.docker') || contains(github.event.head_commit.message, 'scripts/common.sh') || contains(github.event.head_commit.message, 'scripts/entrypoint.sh') || contains(github.event.head_commit.message, 'scripts/rf_tools.sh')
    steps:
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          install: true
          version: latest

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Create and push multi-arch manifest for wifi
        run: |
          tagname=wifi_light

          # Inspect images for different architectures
          output_amd64=$(docker buildx imagetools inspect ${{ env.REGISTRY_IMAGE }}:${tagname}_amd64)
          output_arm64=$(docker buildx imagetools inspect ${{ env.REGISTRY_IMAGE }}:${tagname}_arm64)
          output_riscv64=$(docker buildx imagetools inspect ${{ env.REGISTRY_IMAGE }}:${tagname}_riscv64)

          # Extract the digests
          arch_digest_amd64=$(echo "$output_amd64" | grep "vnd.docker.reference.digest:" | awk '{print $2}')
          arch_digest_arm64=$(echo "$output_arm64" | grep "vnd.docker.reference.digest:" | awk '{print $2}')
          arch_digest_riscv64=$(echo "$output_riscv64" | grep "vnd.docker.reference.digest:" | awk '{print $2}')

          # Debug: Print the extracted digests
          echo "amd64 digest: $arch_digest_amd64"
          echo "arm64 digest: $arch_digest_arm64"
          echo "riscv64 digest: $arch_digest_riscv64"

          # Create and push the multi-arch manifest
          docker buildx imagetools create \
            --tag ${{ env.REGISTRY_IMAGE }}:$tagname \
            ${{ env.REGISTRY_IMAGE }}:${tagname}_amd64@$arch_digest_amd64 \
            ${{ env.REGISTRY_IMAGE }}:${tagname}_arm64@$arch_digest_arm64 \
            ${{ env.REGISTRY_IMAGE }}:${tagname}_riscv64@$arch_digest_riscv64

  bluetooth:
    runs-on: ubuntu-latest
    needs: sdrsa_devices
    strategy:
      matrix:
        platform: [amd64, arm64, riscv64]
    if: contains(github.event.head_commit.message, 'Dockerfiles/Makefile') || contains(github.event.head_commit.message, 'config/') || contains(github.event.head_commit.message, 'rules/') || contains(github.event.head_commit.message, 'run/') || contains(github.event.head_commit.message, 'Dockerfiles/bluetooth.docker') || contains(github.event.head_commit.message, 'scripts/common.sh') || contains(github.event.head_commit.message, 'scripts/entrypoint.sh') || contains(github.event.head_commit.message, 'scripts/rf_tools.sh')
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          install: true

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push bluetooth image with caching
        run: |
          cd Dockerfiles
          STORAGE_TYPE=registry ARCH=${{ matrix.platform }} CACHE_REPO=${{ env.CACHE_REPO }} REGISTRY_IMAGE=${{ env.REGISTRY_IMAGE }} make bluetooth

  bluetooth-manifest:
    runs-on: ubuntu-latest
    needs: bluetooth
    if: contains(github.event.head_commit.message, 'Dockerfiles/Makefile') || contains(github.event.head_commit.message, 'config/') || contains(github.event.head_commit.message, 'rules/') || contains(github.event.head_commit.message, 'run/') || contains(github.event.head_commit.message, 'Dockerfiles/bluetooth.docker') || contains(github.event.head_commit.message, 'scripts/common.sh') || contains(github.event.head_commit.message, 'scripts/entrypoint.sh') || contains(github.event.head_commit.message, 'scripts/rf_tools.sh')
    steps:
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          install: true
          version: latest

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Create and push multi-arch manifest for bluetooth
        run: |
          tagname=bluetooth

          # Inspect images for different architectures
          output_amd64=$(docker buildx imagetools inspect ${{ env.REGISTRY_IMAGE }}:${tagname}_amd64)
          output_arm64=$(docker buildx imagetools inspect ${{ env.REGISTRY_IMAGE }}:${tagname}_arm64)
          output_riscv64=$(docker buildx imagetools inspect ${{ env.REGISTRY_IMAGE }}:${tagname}_riscv64)

          # Extract the digests
          arch_digest_amd64=$(echo "$output_amd64" | grep "vnd.docker.reference.digest:" | awk '{print $2}')
          arch_digest_arm64=$(echo "$output_arm64" | grep "vnd.docker.reference.digest:" | awk '{print $2}')
          arch_digest_riscv64=$(echo "$output_riscv64" | grep "vnd.docker.reference.digest:" | awk '{print $2}')

          # Debug: Print the extracted digests
          echo "amd64 digest: $arch_digest_amd64"
          echo "arm64 digest: $arch_digest_arm64"
          echo "riscv64 digest: $arch_digest_riscv64"

          # Create and push the multi-arch manifest
          docker buildx imagetools create \
            --tag ${{ env.REGISTRY_IMAGE }}:$tagname \
            ${{ env.REGISTRY_IMAGE }}:${tagname}_amd64@$arch_digest_amd64 \
            ${{ env.REGISTRY_IMAGE }}:${tagname}_arm64@$arch_digest_arm64 \
            ${{ env.REGISTRY_IMAGE }}:${tagname}_riscv64@$arch_digest_riscv64

  rfid:
    runs-on: ubuntu-latest
    needs: corebuild
    strategy:
      matrix:
        platform: [amd64, arm64, riscv64]
    if: contains(github.event.head_commit.message, 'Dockerfiles/Makefile') || contains(github.event.head_commit.message, 'config/') || contains(github.event.head_commit.message, 'rules/') || contains(github.event.head_commit.message, 'run/') || contains(github.event.head_commit.message, 'Dockerfiles/rfid.docker') || contains(github.event.head_commit.message, 'scripts/common.sh') || contains(github.event.head_commit.message, 'scripts/entrypoint.sh') || contains(github.event.head_commit.message, 'scripts/rf_tools.sh')
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          install: true

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push rfid image with caching
        run: |
          cd Dockerfiles
          STORAGE_TYPE=registry ARCH=${{ matrix.platform }} CACHE_REPO=${{ env.CACHE_REPO }} REGISTRY_IMAGE=${{ env.REGISTRY_IMAGE }} make rfid

  rfid-manifest:
    runs-on: ubuntu-latest
    needs: rfid
    if: contains(github.event.head_commit.message, 'Dockerfiles/Makefile') || contains(github.event.head_commit.message, 'config/') || contains(github.event.head_commit.message, 'rules/') || contains(github.event.head_commit.message, 'run/') || contains(github.event.head_commit.message, 'Dockerfiles/rfid.docker') || contains(github.event.head_commit.message, 'scripts/common.sh') || contains(github.event.head_commit.message, 'scripts/entrypoint.sh') || contains(github.event.head_commit.message, 'scripts/rf_tools.sh')
    steps:
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          install: true
          version: latest

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Create and push multi-arch manifest for rfid
        run: |
          tagname=rfid

          # Inspect images for different architectures
          output_amd64=$(docker buildx imagetools inspect ${{ env.REGISTRY_IMAGE }}:${tagname}_amd64)
          output_arm64=$(docker buildx imagetools inspect ${{ env.REGISTRY_IMAGE }}:${tagname}_arm64)
          output_riscv64=$(docker buildx imagetools inspect ${{ env.REGISTRY_IMAGE }}:${tagname}_riscv64)

          # Extract the digests
          arch_digest_amd64=$(echo "$output_amd64" | grep "vnd.docker.reference.digest:" | awk '{print $2}')
          arch_digest_arm64=$(echo "$output_arm64" | grep "vnd.docker.reference.digest:" | awk '{print $2}')
          arch_digest_riscv64=$(echo "$output_riscv64" | grep "vnd.docker.reference.digest:" | awk '{print $2}')

          # Debug: Print the extracted digests
          echo "amd64 digest: $arch_digest_amd64"
          echo "arm64 digest: $arch_digest_arm64"
          echo "riscv64 digest: $arch_digest_riscv64"

          # Create and push the multi-arch manifest
          docker buildx imagetools create \
            --tag ${{ env.REGISTRY_IMAGE }}:$tagname \
            ${{ env.REGISTRY_IMAGE }}:${tagname}_amd64@$arch_digest_amd64 \
            ${{ env.REGISTRY_IMAGE }}:${tagname}_arm64@$arch_digest_arm64 \
            ${{ env.REGISTRY_IMAGE }}:${tagname}_riscv64@$arch_digest_riscv64

  automotive:
    runs-on: ubuntu-latest
    needs: corebuild
    strategy:
      matrix:
        platform: [amd64, arm64]
    if: contains(github.event.head_commit.message, 'Dockerfiles/Makefile') || contains(github.event.head_commit.message, 'config/') || contains(github.event.head_commit.message, 'rules/') || contains(github.event.head_commit.message, 'run/') || contains(github.event.head_commit.message, 'Dockerfiles/automotive.docker') || contains(github.event.head_commit.message, 'scripts/common.sh') || contains(github.event.head_commit.message, 'scripts/entrypoint.sh') || contains(github.event.head_commit.message, 'scripts/automotive_software.sh')
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          install: true

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push automotive image with caching
        run: |
          cd Dockerfiles
          STORAGE_TYPE=registry ARCH=${{ matrix.platform }} CACHE_REPO=${{ env.CACHE_REPO }} REGISTRY_IMAGE=${{ env.REGISTRY_IMAGE }} make automotive

  automotive-manifest:
    runs-on: ubuntu-latest
    needs: automotive
    if: contains(github.event.head_commit.message, 'Dockerfiles/Makefile') || contains(github.event.head_commit.message, 'config/') || contains(github.event.head_commit.message, 'rules/') || contains(github.event.head_commit.message, 'run/') || contains(github.event.head_commit.message, 'Dockerfiles/automotive.docker') || contains(github.event.head_commit.message, 'scripts/common.sh') || contains(github.event.head_commit.message, 'scripts/entrypoint.sh') || contains(github.event.head_commit.message, 'scripts/automotive_software.sh')
    steps:
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          install: true
          version: latest

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Create and push multi-arch manifest for automotive
        run: |
          tagname=automotive

          # Inspect images for different architectures
          output_amd64=$(docker buildx imagetools inspect ${{ env.REGISTRY_IMAGE }}:${tagname}_amd64)
          output_arm64=$(docker buildx imagetools inspect ${{ env.REGISTRY_IMAGE }}:${tagname}_arm64)

          # Extract the digests
          arch_digest_amd64=$(echo "$output_amd64" | grep "vnd.docker.reference.digest:" | awk '{print $2}')
          arch_digest_arm64=$(echo "$output_arm64" | grep "vnd.docker.reference.digest:" | awk '{print $2}')
          arch_digest_riscv64=$(echo "$output_riscv64" | grep "vnd.docker.reference.digest:" | awk '{print $2}')

          # Debug: Print the extracted digests
          echo "amd64 digest: $arch_digest_amd64"
          echo "arm64 digest: $arch_digest_arm64"
          echo "riscv64 digest: $arch_digest_riscv64"

          # Create and push the multi-arch manifest
          docker buildx imagetools create \
            --tag ${{ env.REGISTRY_IMAGE }}:$tagname \
            ${{ env.REGISTRY_IMAGE }}:${tagname}_amd64@$arch_digest_amd64 \
            ${{ env.REGISTRY_IMAGE }}:${tagname}_arm64@$arch_digest_arm64

  reversing:
    runs-on: ubuntu-latest
    needs: corebuild
    strategy:
      matrix:
        platform: [amd64, arm64]
    if: contains(github.event.head_commit.message, 'Dockerfiles/Makefile') || contains(github.event.head_commit.message, 'config/') || contains(github.event.head_commit.message, 'rules/') || contains(github.event.head_commit.message, 'run/') || contains(github.event.head_commit.message, 'Dockerfiles/reversing.docker') || contains(github.event.head_commit.message, 'scripts/common.sh') || contains(github.event.head_commit.message, 'scripts/entrypoint.sh') || contains(github.event.head_commit.message, 'scripts/reverse_software.sh')
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          install: true

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push reversing image with caching
        run: |
          cd Dockerfiles
          STORAGE_TYPE=registry ARCH=${{ matrix.platform }} CACHE_REPO=${{ env.CACHE_REPO }} REGISTRY_IMAGE=${{ env.REGISTRY_IMAGE }} make reversing

  reversing-manifest:
    runs-on: ubuntu-latest
    needs: reversing
    if: contains(github.event.head_commit.message, 'Dockerfiles/Makefile') || contains(github.event.head_commit.message, 'config/') || contains(github.event.head_commit.message, 'rules/') || contains(github.event.head_commit.message, 'run/') || contains(github.event.head_commit.message, 'Dockerfiles/reversing.docker') || contains(github.event.head_commit.message, 'scripts/common.sh') || contains(github.event.head_commit.message, 'scripts/entrypoint.sh') || contains(github.event.head_commit.message, 'scripts/reverse_software.sh')
    steps:
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          install: true
          version: latest

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Create and push multi-arch manifest for reversing
        run: |
          tagname=reversing

          # Inspect images for different architectures
          output_amd64=$(docker buildx imagetools inspect ${{ env.REGISTRY_IMAGE }}:${tagname}_amd64)
          output_arm64=$(docker buildx imagetools inspect ${{ env.REGISTRY_IMAGE }}:${tagname}_arm64)

          # Extract the digests
          arch_digest_amd64=$(echo "$output_amd64" | grep "vnd.docker.reference.digest:" | awk '{print $2}')
          arch_digest_arm64=$(echo "$output_arm64" | grep "vnd.docker.reference.digest:" | awk '{print $2}')
          arch_digest_riscv64=$(echo "$output_riscv64" | grep "vnd.docker.reference.digest:" | awk '{print $2}')

          # Debug: Print the extracted digests
          echo "amd64 digest: $arch_digest_amd64"
          echo "arm64 digest: $arch_digest_arm64"
          echo "riscv64 digest: $arch_digest_riscv64"

          # Create and push the multi-arch manifest
          docker buildx imagetools create \
            --tag ${{ env.REGISTRY_IMAGE }}:$tagname \
            ${{ env.REGISTRY_IMAGE }}:${tagname}_amd64@$arch_digest_amd64 \
            ${{ env.REGISTRY_IMAGE }}:${tagname}_arm64@$arch_digest_arm64