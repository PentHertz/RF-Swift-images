name: Multi-Platform Docker Build with Caching

env:
  REGISTRY_IMAGE: penthertz/rfswiftdev
  BUILD_PLATFORMS: linux/amd64
  CACHE_PLATFORMS: linux_amd64
  CACHE_REPO: penthertz/rfswiftdev/cache
  DO_SPACES_ENDPOINT: ${{ secrets.BUCKET_URL }}
  DO_SPACES_REGION: ${{ secrets.BUCKET_REGION }}

on:
  push:
    branches:
      - main

jobs:
  corebuild:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          install: true
          version: latest

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push corebuild image with caching
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.SRV_GHA_AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.SRV_GHA_AWS_SECRET_ACCESS_KEY }}
          AWS_EC2_METADATA_DISABLED: true
          AWS_REGION: ${{ secrets.BUCKET_REGION }}
          AWS_DEFAULT_REGION: ${{ secrets.BUCKET_REGION }}
          AWS_ENDPOINT: ${{ secrets.BUCKET_URL }}
          S3_ENDPOINT: ${{ secrets.BUCKET_URL }}
          S3_USE_PATH_STYLE: true
          S3_FORCE_PATH_STYLE: true
          S3_URL: ${{ secrets.BUCKET_URL }}/${{ secrets.BUCKET_NAME }}
        run: |
          docker buildx build --platform ${{ env.BUILD_PLATFORMS }} \
            --cache-from=type=s3-compatible,region=${{ secrets.BUCKET_REGION }},bucket=${{ secrets.BUCKET_NAME }},name=cache/corebuild,s3-url=${{ env.S3_URL }} \
            --cache-to=type=s3-compatible,region=${{ secrets.BUCKET_REGION }},bucket=${{ secrets.BUCKET_NAME }},name=cache/corebuild,mode=max,s3-url=${{ env.S3_URL }} \
            --push \
            -t ${{ env.REGISTRY_IMAGE }}:corebuild \
            -f Dockerfiles/slim.docker \
            .

  automotive:
    runs-on: ubuntu-latest
    needs: corebuild
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          install: true

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Configure DigitalOcean Spaces credentials
        run: |
          mkdir -p ~/.aws
          echo "[default]
          aws_access_key_id=${{ secrets.SRV_GHA_AWS_ACCESS_KEY_ID }}
          aws_secret_access_key=${{ secrets.SRV_GHA_AWS_SECRET_ACCESS_KEY }}
          endpoint_url=${{ secrets.BUCKET_URL }}" > ~/.aws/credentials

      - name: Build and push automotive image with caching
        env:
          AWS_EC2_METADATA_DISABLED: true
        run: |
          docker buildx build --platform ${{ env.BUILD_PLATFORMS }} \
            --cache-from=type=s3,region=${{ env.DO_SPACES_REGION }},bucket=${{ secrets.BUCKET_NAME }},endpoint=${{ env.DO_SPACES_ENDPOINT }},name=cache/automotive \
            --cache-to=type=s3,region=${{ env.DO_SPACES_REGION }},bucket=${{ secrets.BUCKET_NAME }},endpoint=${{ env.DO_SPACES_ENDPOINT }},name=cache/automotive,mode=max \
            --build-arg BASE_IMAGE=${{ env.REGISTRY_IMAGE }}:corebuild \
            --push \
            -t ${{ env.REGISTRY_IMAGE }}:automotive \
            -f Dockerfiles/automotive.docker \
            .

  sdr_light_antsdr:
    runs-on: ubuntu-latest
    needs: corebuild
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          install: true

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Configure DigitalOcean Spaces credentials
        run: |
          mkdir -p ~/.aws
          echo "[default]
          aws_access_key_id=${{ secrets.SRV_GHA_AWS_ACCESS_KEY_ID }}
          aws_secret_access_key=${{ secrets.SRV_GHA_AWS_SECRET_ACCESS_KEY }}
          endpoint_url=${{ secrets.BUCKET_URL }}" > ~/.aws/credentials

      - name: Build and push sdr_light_antsdr image with caching
        env:
          AWS_EC2_METADATA_DISABLED: true
        run: |
          docker buildx build --platform ${{ env.BUILD_PLATFORMS }} \
            --cache-from=type=s3,region=${{ env.DO_SPACES_REGION }},bucket=${{ secrets.BUCKET_NAME }},endpoint=${{ env.DO_SPACES_ENDPOINT }},name=cache/sdr_light_antsdr \
            --cache-to=type=s3,region=${{ env.DO_SPACES_REGION }},bucket=${{ secrets.BUCKET_NAME }},endpoint=${{ env.DO_SPACES_ENDPOINT }},name=cache/sdr_light_antsdr,mode=max \
            --build-arg BASE_IMAGE=${{ env.REGISTRY_IMAGE }}:corebuild \
            --build-arg UHD_BASE=antsdr_uhd \
            --build-arg RTLSDR_BASE=rtlsdr \
            --push \
            -t ${{ env.REGISTRY_IMAGE }}:sdr_light_antsdr \
            -f Dockerfiles/SDR/sdr_light.docker \
            .

  sdr_light_rtlsdrv4:
    runs-on: ubuntu-latest
    needs: corebuild
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          install: true

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Configure DigitalOcean Spaces credentials
        run: |
          mkdir -p ~/.aws
          echo "[default]
          aws_access_key_id=${{ secrets.SRV_GHA_AWS_ACCESS_KEY_ID }}
          aws_secret_access_key=${{ secrets.SRV_GHA_AWS_SECRET_ACCESS_KEY }}
          endpoint_url=${{ secrets.BUCKET_URL }}" > ~/.aws/credentials

      - name: Build and push sdr_light_rtlsdrv4 image with caching
        env:
          AWS_EC2_METADATA_DISABLED: true
        run: |
          docker buildx build --platform ${{ env.BUILD_PLATFORMS }} \
            --cache-from=type=s3,region=${{ env.DO_SPACES_REGION }},bucket=${{ secrets.BUCKET_NAME }},endpoint=${{ env.DO_SPACES_ENDPOINT }},name=cache/sdr_light_rtlsdrv4 \
            --cache-to=type=s3,region=${{ env.DO_SPACES_REGION }},bucket=${{ secrets.BUCKET_NAME }},endpoint=${{ env.DO_SPACES_ENDPOINT }},name=cache/sdr_light_rtlsdrv4,mode=max \
            --build-arg BASE_IMAGE=${{ env.REGISTRY_IMAGE }}:corebuild \
            --build-arg UHD_BASE=uhd \
            --build-arg RTLSDR_BASE=rtlsdrv4 \
            --push \
            -t ${{ env.REGISTRY_IMAGE }}:sdr_light_rtlsdrv4 \
            -f Dockerfiles/SDR/sdr_light.docker \
            .

  reversing:
    runs-on: ubuntu-latest
    needs: corebuild
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          install: true

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Configure DigitalOcean Spaces credentials
        run: |
          mkdir -p ~/.aws
          echo "[default]
          aws_access_key_id=${{ secrets.SRV_GHA_AWS_ACCESS_KEY_ID }}
          aws_secret_access_key=${{ secrets.SRV_GHA_AWS_SECRET_ACCESS_KEY }}
          endpoint_url=${{ secrets.BUCKET_URL }}" > ~/.aws/credentials

      - name: Build and push reversing image with caching
        env:
          AWS_EC2_METADATA_DISABLED: true
        run: |
          docker buildx build --platform ${{ env.BUILD_PLATFORMS }} \
            --cache-from=type=s3,region=${{ env.DO_SPACES_REGION }},bucket=${{ secrets.BUCKET_NAME }},endpoint=${{ env.DO_SPACES_ENDPOINT }},name=cache/reversing \
            --cache-to=type=s3,region=${{ env.DO_SPACES_REGION }},bucket=${{ secrets.BUCKET_NAME }},endpoint=${{ env.DO_SPACES_ENDPOINT }},name=cache/reversing,mode=max \
            --build-arg BASE_IMAGE=${{ env.REGISTRY_IMAGE }}:corebuild \
            --push \
            -t ${{ env.REGISTRY_IMAGE }}:reversing \
            -f Dockerfiles/reversing.docker \
            .

  sdr_light:
    runs-on: ubuntu-latest
    needs: corebuild
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          install: true

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Configure DigitalOcean Spaces credentials
        run: |
          mkdir -p ~/.aws
          echo "[default]
          aws_access_key_id=${{ secrets.SRV_GHA_AWS_ACCESS_KEY_ID }}
          aws_secret_access_key=${{ secrets.SRV_GHA_AWS_SECRET_ACCESS_KEY }}
          endpoint_url=${{ secrets.BUCKET_URL }}" > ~/.aws/credentials

      - name: Build and push sdr_light image with caching
        env:
          AWS_EC2_METADATA_DISABLED: true
        run: |
          docker buildx build --platform ${{ env.BUILD_PLATFORMS }} \
            --cache-from=type=s3,region=${{ env.DO_SPACES_REGION }},bucket=${{ secrets.BUCKET_NAME }},endpoint=${{ env.DO_SPACES_ENDPOINT }},name=cache/sdr_light \
            --cache-to=type=s3,region=${{ env.DO_SPACES_REGION }},bucket=${{ secrets.BUCKET_NAME }},endpoint=${{ env.DO_SPACES_ENDPOINT }},name=cache/sdr_light,mode=max \
            --build-arg BASE_IMAGE=${{ env.REGISTRY_IMAGE }}:corebuild \
            --build-arg UHD_BASE=uhd \
            --build-arg RTLSDR_BASE=rtlsdr \
            --push \
            -t ${{ env.REGISTRY_IMAGE }}:sdr_light \
            -f Dockerfiles/SDR/sdr_light.docker \
            .

  sdr_full:
    runs-on: ubuntu-latest
    needs: sdr_light
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          install: true

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Configure DigitalOcean Spaces credentials
        run: |
          mkdir -p ~/.aws
          echo "[default]
          aws_access_key_id=${{ secrets.SRV_GHA_AWS_ACCESS_KEY_ID }}
          aws_secret_access_key=${{ secrets.SRV_GHA_AWS_SECRET_ACCESS_KEY }}
          endpoint_url=${{ secrets.BUCKET_URL }}" > ~/.aws/credentials

      - name: Build and push sdr_full image with caching
        env:
          AWS_EC2_METADATA_DISABLED: true
        run: |
          docker buildx build --platform ${{ env.BUILD_PLATFORMS }} \
            --cache-from=type=s3,region=${{ env.DO_SPACES_REGION }},bucket=${{ secrets.BUCKET_NAME }},endpoint=${{ env.DO_SPACES_ENDPOINT }},name=cache/sdr_full \
            --cache-to=type=s3,region=${{ env.DO_SPACES_REGION }},bucket=${{ secrets.BUCKET_NAME }},endpoint=${{ env.DO_SPACES_ENDPOINT }},name=cache/sdr_full,mode=max \
            --build-arg BASE_IMAGE=${{ env.REGISTRY_IMAGE }}:sdr_light \
            --push \
            -t ${{ env.REGISTRY_IMAGE }}:sdr_full \
            -f Dockerfiles/SDR/sdr_full.docker \
            .

  rfid:
    runs-on: ubuntu-latest
    needs: corebuild
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          install: true

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Configure DigitalOcean Spaces credentials
        run: |
          mkdir -p ~/.aws
          echo "[default]
          aws_access_key_id=${{ secrets.SRV_GHA_AWS_ACCESS_KEY_ID }}
          aws_secret_access_key=${{ secrets.SRV_GHA_AWS_SECRET_ACCESS_KEY }}
          endpoint_url=${{ secrets.BUCKET_URL }}" > ~/.aws/credentials

      - name: Build and push rfid image with caching
        env:
          AWS_EC2_METADATA_DISABLED: true
        run: |
          docker buildx build --platform ${{ env.BUILD_PLATFORMS }} \
            --cache-from=type=s3,region=${{ env.DO_SPACES_REGION }},bucket=${{ secrets.BUCKET_NAME }},endpoint=${{ env.DO_SPACES_ENDPOINT }},name=cache/rfid \
            --cache-to=type=s3,region=${{ env.DO_SPACES_REGION }},bucket=${{ secrets.BUCKET_NAME }},endpoint=${{ env.DO_SPACES_ENDPOINT }},name=cache/rfid,mode=max \
            --build-arg BASE_IMAGE=${{ env.REGISTRY_IMAGE }}:corebuild \
            --push \
            -t ${{ env.REGISTRY_IMAGE }}:rfid \
            -f Dockerfiles/rfid.docker \
            .

  wifi:
    runs-on: ubuntu-latest
    needs: sdr_light
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          install: true

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Configure DigitalOcean Spaces credentials
        run: |
          mkdir -p ~/.aws
          echo "[default]
          aws_access_key_id=${{ secrets.SRV_GHA_AWS_ACCESS_KEY_ID }}
          aws_secret_access_key=${{ secrets.SRV_GHA_AWS_SECRET_ACCESS_KEY }}
          endpoint_url=${{ secrets.BUCKET_URL }}" > ~/.aws/credentials

      - name: Build and push wifi image with caching
        env:
          AWS_EC2_METADATA_DISABLED: true
        run: |
          docker buildx build --platform ${{ env.BUILD_PLATFORMS }} \
            --cache-from=type=s3,region=${{ env.DO_SPACES_REGION }},bucket=${{ secrets.BUCKET_NAME }},endpoint=${{ env.DO_SPACES_ENDPOINT }},name=cache/wifi \
            --cache-to=type=s3,region=${{ env.DO_SPACES_REGION }},bucket=${{ secrets.BUCKET_NAME }},endpoint=${{ env.DO_SPACES_ENDPOINT }},name=cache/wifi,mode=max \
            --build-arg BASE_IMAGE=${{ env.REGISTRY_IMAGE }}:sdr_light \
            --push \
            -t ${{ env.REGISTRY_IMAGE }}:wifi \
            -f Dockerfiles/wifi.docker \
            .

  bluetooth:
    runs-on: ubuntu-latest
    needs: sdr_light
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          install: true

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Configure DigitalOcean Spaces credentials
        run: |
          mkdir -p ~/.aws
          echo "[default]
          aws_access_key_id=${{ secrets.SRV_GHA_AWS_ACCESS_KEY_ID }}
          aws_secret_access_key=${{ secrets.SRV_GHA_AWS_SECRET_ACCESS_KEY }}
          endpoint_url=${{ secrets.BUCKET_URL }}" > ~/.aws/credentials

      - name: Build and push bluetooth image with caching
        env:
          AWS_EC2_METADATA_DISABLED: true
        run: |
          docker buildx build --platform ${{ env.BUILD_PLATFORMS }} \
            --cache-from=type=s3,region=${{ env.DO_SPACES_REGION }},bucket=${{ secrets.BUCKET_NAME }},endpoint=${{ env.DO_SPACES_ENDPOINT }},name=cache/bluetooth \
            --cache-to=type=s3,region=${{ env.DO_SPACES_REGION }},bucket=${{ secrets.BUCKET_NAME }},endpoint=${{ env.DO_SPACES_ENDPOINT }},name=cache/bluetooth,mode=max \
            --build-arg BASE_IMAGE=${{ env.REGISTRY_IMAGE }}:sdr_light \
            --push \
            -t ${{ env.REGISTRY_IMAGE }}:bluetooth \
            -f Dockerfiles/bluetooth.docker \
            .

  sdr_deeptemptest_beta:
    runs-on: ubuntu-latest
    needs: sdr_light
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          install: true

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Configure DigitalOcean Spaces credentials
        run: |
          mkdir -p ~/.aws
          echo "[default]
          aws_access_key_id=${{ secrets.SRV_GHA_AWS_ACCESS_KEY_ID }}
          aws_secret_access_key=${{ secrets.SRV_GHA_AWS_SECRET_ACCESS_KEY }}
          endpoint_url=${{ secrets.BUCKET_URL }}" > ~/.aws/credentials

      - name: Build and push sdr_deeptemptest_beta image with caching
        env:
          AWS_EC2_METADATA_DISABLED: true
        run: |
          docker buildx build --platform ${{ env.BUILD_PLATFORMS }} \
            --cache-from=type=s3,region=${{ env.DO_SPACES_REGION }},bucket=${{ secrets.BUCKET_NAME }},endpoint=${{ env.DO_SPACES_ENDPOINT }},name=cache/sdr_deeptemptest_beta \
            --cache-to=type=s3,region=${{ env.DO_SPACES_REGION }},bucket=${{ secrets.BUCKET_NAME }},endpoint=${{ env.DO_SPACES_ENDPOINT }},name=cache/sdr_deeptemptest_beta,mode=max \
            --build-arg BASE_IMAGE=${{ env.REGISTRY_IMAGE }}:sdr_light \
            --push \
            -t ${{ env.REGISTRY_IMAGE }}:sdr_deeptemptest_beta \
            -f Dockerfiles/SDR/sdr_deeptemptest_beta.docker \
            .