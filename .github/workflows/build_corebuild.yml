name: Multi-Platform Docker Build with Caching

env:
  REGISTRY_IMAGE: penthertz/rfswiftdev
  BUILD_PLATFORMS: linux/amd64,linux/arm64
  CACHE_REPO: ${{ env.REGISTRY_IMAGE }}/cache

on:
  push:
    branches:
      - main

jobs:
  corebuild:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          install: true

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push corebuild image with caching
        run: |
          docker buildx build --platform ${{ env.BUILD_PLATFORMS }} \
            --cache-from=type=registry,ref=${{ env.CACHE_REPO }}:corebuild \
            --cache-to=type=registry,ref=${{ env.CACHE_REPO }}:corebuild,mode=max \
            --push \
            -t ${{ env.REGISTRY_IMAGE }}:corebuild \
            -f Dockerfiles/SDR/corebuild.docker \
            .

  automotive:
    runs-on: ubuntu-latest
    needs: corebuild
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          install: true

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push automotive image with caching
        run: |
          docker buildx build --platform ${{ env.BUILD_PLATFORMS }} \
            --cache-from=type=registry,ref=${{ env.CACHE_REPO }}:automotive \
            --cache-to=type=registry,ref=${{ env.CACHE_REPO }}:automotive,mode=max \
            --build-arg BASE_IMAGE=${{ env.REGISTRY_IMAGE }}:corebuild \
            --push \
            -t ${{ env.REGISTRY_IMAGE }}:automotive \
            -f Dockerfiles/automotive.docker \
            .

  sdr_light_antsdr:
    runs-on: ubuntu-latest
    needs: corebuild
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          install: true

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push sdr_light_antsdr image with caching
        run: |
          docker buildx build --platform ${{ env.BUILD_PLATFORMS }} \
            --cache-from=type=registry,ref=${{ env.CACHE_REPO }}:sdr_light_antsdr \
            --cache-to=type=registry,ref=${{ env.CACHE_REPO }}:sdr_light_antsdr,mode=max \
            --build-arg BASE_IMAGE=${{ env.REGISTRY_IMAGE }}:corebuild \
            --push \
            -t ${{ env.REGISTRY_IMAGE }}:sdr_light_antsdr \
            -f Dockerfiles/SDR/sdr_light_antsdr.docker \
            .

  sdr_light_rtlsdrv4:
    runs-on: ubuntu-latest
    needs: corebuild
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          install: true

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push sdr_light_rtlsdrv4 image with caching
        run: |
          docker buildx build --platform ${{ env.BUILD_PLATFORMS }} \
            --cache-from=type=registry,ref=${{ env.CACHE_REPO }}:sdr_light_rtlsdrv4 \
            --cache-to=type=registry,ref=${{ env.CACHE_REPO }}:sdr_light_rtlsdrv4,mode=max \
            --build-arg BASE_IMAGE=${{ env.REGISTRY_IMAGE }}:corebuild \
            --push \
            -t ${{ env.REGISTRY_IMAGE }}:sdr_light_rtlsdrv4 \
            -f Dockerfiles/SDR/sdr_light_rtlsdrv4.docker \
            .

  reversing:
    runs-on: ubuntu-latest
    needs: corebuild
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          install: true

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push reversing image with caching
        run: |
          docker buildx build --platform ${{ env.BUILD_PLATFORMS }} \
            --cache-from=type=registry,ref=${{ env.CACHE_REPO }}:reversing \
            --cache-to=type=registry,ref=${{ env.CACHE_REPO }}:reversing,mode=max \
            --build-arg BASE_IMAGE=${{ env.REGISTRY_IMAGE }}:corebuild \
            --push \
            -t ${{ env.REGISTRY_IMAGE }}:reversing \
            -f Dockerfiles/reversing.docker \
            .

  sdr_light:
    runs-on: ubuntu-latest
    needs: corebuild
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          install: true

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push sdr_light image with caching
        run: |
          docker buildx build --platform ${{ env.BUILD_PLATFORMS }} \
            --cache-from=type=registry,ref=${{ env.CACHE_REPO }}:sdr_light \
            --cache-to=type=registry,ref=${{ env.CACHE_REPO }}:sdr_light,mode=max \
            --build-arg BASE_IMAGE=${{ env.REGISTRY_IMAGE }}:corebuild \
            --push \
            -t ${{ env.REGISTRY_IMAGE }}:sdr_light \
            -f Dockerfiles/SDR/sdr_light.docker \
            .

  sdr_full:
    runs-on: ubuntu-latest
    needs: sdr_light
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          install: true

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push sdr_full image with caching
        run: |
          docker buildx build --platform ${{ env.BUILD_PLATFORMS }} \
            --cache-from=type=registry,ref=${{ env.CACHE_REPO }}:sdr_full \
            --cache-to=type=registry,ref=${{ env.CACHE_REPO }}:sdr_full,mode=max \
            --build-arg BASE_IMAGE=${{ env.REGISTRY_IMAGE }}:sdr_light \
            --push \
            -t ${{ env.REGISTRY_IMAGE }}:sdr_full \
            -f Dockerfiles/SDR/sdr_full.docker \
            .

  rfid:
    runs-on: ubuntu-latest
    needs: sdr_light
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          install: true

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push rfid image with caching
        run: |
          docker buildx build --platform ${{ env.BUILD_PLATFORMS }} \
            --cache-from=type=registry,ref=${{ env.CACHE_REPO }}:rfid \
            --cache-to=type=registry,ref=${{ env.CACHE_REPO }}:rfid,mode=max \
            --build-arg BASE_IMAGE=${{ env.REGISTRY_IMAGE }}:sdr_light \
            --push \
            -t ${{ env.REGISTRY_IMAGE }}:rfid \
            -f Dockerfiles/rfid.docker \
            .

  wifi:
    runs-on: ubuntu-latest
    needs: sdr_light
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          install: true

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push wifi image with caching
        run: |
          docker buildx build --platform ${{ env.BUILD_PLATFORMS }} \
            --cache-from=type=registry,ref=${{ env.CACHE_REPO }}:wifi \
            --cache-to=type=registry,ref=${{ env.CACHE_REPO }}:wifi,mode=max \
            --build-arg BASE_IMAGE=${{ env.REGISTRY_IMAGE }}:sdr_light \
            --push \
            -t ${{ env.REGISTRY_IMAGE }}:wifi \
            -f Dockerfiles/wifi.docker \
            .

  bluetooth:
    runs-on: ubuntu-latest
    needs: sdr_light
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          install: true

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push bluetooth image with caching
        run: |
          docker buildx build --platform ${{ env.BUILD_PLATFORMS }} \
            --cache-from=type=registry,ref=${{ env.CACHE_REPO }}:bluetooth \
            --cache-to=type=registry,ref=${{ env.CACHE_REPO }}:bluetooth,mode=max \
            --build-arg BASE_IMAGE=${{ env.REGISTRY_IMAGE }}:sdr_light \
            --push \
            -t ${{ env.REGISTRY_IMAGE }}:bluetooth \
            -f Dockerfiles/bluetooth.docker \
            .

  sdr_deeptemptest_beta:
    runs-on: ubuntu-latest
    needs: sdr_light
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          install: true

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push sdr_deeptemptest_beta image with caching
        run: |
          docker buildx build --platform ${{ env.BUILD_PLATFORMS }} \
            --cache-from=type=registry,ref=${{ env.CACHE_REPO }}:sdr_deeptemptest_beta \
            --cache-to=type=registry,ref=${{ env.CACHE_REPO }}:sdr_deeptemptest_beta,mode=max \
            --build-arg BASE_IMAGE=${{ env.REGISTRY_IMAGE }}:sdr_light \
            --push \
            -t ${{ env.REGISTRY_IMAGE }}:sdr_deeptemptest_beta \
            -f Dockerfiles/SDR/sdr_deeptemptest_beta.docker \
            .
