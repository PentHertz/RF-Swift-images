name: Multi-Platform Docker Build with Caching

env:
  REGISTRY_IMAGE: penthertz/rfswiftdev
  BUILD_PLATFORMS: linux/amd64,linux/arm64/v8
  CACHE_PLATFORMS: linux_amd64-linux_arm64_v8
  CACHE_REPO: penthertz/rfswiftdev/cache
  S3_BUCKET: ${{ secrets.BUCKET_NAME }}
  S3_ENDPOINT: ${{ secrets.BUCKET_URL }}
  S3_REGION: ${{ secrets.BUCKET_REGION }}

on:
  push:
    branches:
      - main

jobs:
  corebuild:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          install: true

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.SRV_GHA_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.SRV_GHA_AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.S3_REGION }}

      - name: Build and push corebuild image with caching
        run: |
          docker buildx build --platform ${{ env.BUILD_PLATFORMS }} \
            --cache-from=type=s3,region=${{ env.S3_REGION }},bucket=${{ secrets.BUCKET_NAME }},name=cache/corebuild \
            --cache-to=type=s3,region=${{ env.S3_REGION }},bucket=${{ secrets.BUCKET_NAME }},name=cache/corebuild,mode=max \
            --push \
            -t ${{ env.REGISTRY_IMAGE }}:corebuild \
            -f Dockerfiles/SDR/corebuild.docker \
            .

  automotive:
    runs-on: ubuntu-latest
    needs: corebuild
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          install: true

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Configure AWS Profile
        run: |
          mkdir -p ~/.aws && touch ~/.aws/credentials
          cat << EOT > ~/.aws/credentials
          [srv_gha]
          aws_access_key_id=${{ secrets.SRV_GHA_AWS_ACCESS_KEY_ID }}
          aws_secret_access_key=${{ secrets.SRV_GHA_AWS_SECRET_ACCESS_KEY }}
          EOT

      - name: Configure AWS Config
        run: |
          mkdir -p ~/.aws && touch ~/.aws/config
          cat << EOT > ~/.aws/config
          [default]
          region = ${{ env.S3_REGION }}
          output = json
          EOT

      - name: Build and push automotive image with caching
        run: |
          export AWS_BUCKET=${{ env.S3_BUCKET }}
          docker buildx build --platform ${{ env.BUILD_PLATFORMS }} \
            --cache-from=type=s3,ref=${AWS_BUCKET}/cache/automotive,endpoint=${{ env.S3_ENDPOINT }} \
            --cache-to=type=s3,ref=${AWS_BUCKET}/cache/automotive,mode=max,endpoint=${{ env.S3_ENDPOINT }} \
            --build-arg BASE_IMAGE=${{ env.REGISTRY_IMAGE }}:corebuild \
            --push \
            -t ${{ env.REGISTRY_IMAGE }}:automotive \
            -f Dockerfiles/automotive.docker \
            .

  sdr_light_antsdr:
    runs-on: ubuntu-latest
    needs: corebuild
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          install: true

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Configure AWS Profile
        run: |
          mkdir -p ~/.aws && touch ~/.aws/credentials
          cat << EOT > ~/.aws/credentials
          [srv_gha]
          aws_access_key_id=${{ secrets.SRV_GHA_AWS_ACCESS_KEY_ID }}
          aws_secret_access_key=${{ secrets.SRV_GHA_AWS_SECRET_ACCESS_KEY }}
          EOT

      - name: Configure AWS Config
        run: |
          mkdir -p ~/.aws && touch ~/.aws/config
          cat << EOT > ~/.aws/config
          [default]
          region = ${{ env.S3_REGION }}
          output = json
          EOT

      - name: Build and push sdr_light_antsdr image with caching
        run: |
          export AWS_BUCKET=${{ env.S3_BUCKET }}
          docker buildx build --platform ${{ env.BUILD_PLATFORMS }} \
            --cache-from=type=s3,ref=${AWS_BUCKET}/cache/sdr_light_antsdr,endpoint=${{ env.S3_ENDPOINT }} \
            --cache-to=type=s3,ref=${AWS_BUCKET}/cache/sdr_light_antsdr,mode=max,endpoint=${{ env.S3_ENDPOINT }} \
            --build-arg BASE_IMAGE=${{ env.REGISTRY_IMAGE }}:corebuild \
            --build-arg UHD_BASE=antsdr_uhd \
            --build-arg RTLSDR_BASE=rtlsdr \
            --push \
            -t ${{ env.REGISTRY_IMAGE }}:sdr_light_antsdr \
            -f Dockerfiles/SDR/sdr_light.docker \
            .

  sdr_light_rtlsdrv4:
    runs-on: ubuntu-latest
    needs: corebuild
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          install: true

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Configure AWS Profile
        run: |
          mkdir -p ~/.aws && touch ~/.aws/credentials
          cat << EOT > ~/.aws/credentials
          [srv_gha]
          aws_access_key_id=${{ secrets.SRV_GHA_AWS_ACCESS_KEY_ID }}
          aws_secret_access_key=${{ secrets.SRV_GHA_AWS_SECRET_ACCESS_KEY }}
          EOT

      - name: Configure AWS Config
        run: |
          mkdir -p ~/.aws && touch ~/.aws/config
          cat << EOT > ~/.aws/config
          [default]
          region = ${{ env.S3_REGION }}
          output = json
          EOT

      - name: Build and push sdr_light_rtlsdrv4 image with caching
        run: |
          export AWS_BUCKET=${{ env.S3_BUCKET }}
          docker buildx build --platform ${{ env.BUILD_PLATFORMS }} \
            --cache-from=type=s3,ref=${AWS_BUCKET}/cache/sdr_light_rtlsdrv4,endpoint=${{ env.S3_ENDPOINT }} \
            --cache-to=type=s3,ref=${AWS_BUCKET}/cache/sdr_light_rtlsdrv4,mode=max,endpoint=${{ env.S3_ENDPOINT }} \
            --build-arg BASE_IMAGE=${{ env.REGISTRY_IMAGE }}:corebuild \
            --build-arg UHD_BASE=uhd \
            --build-arg RTLSDR_BASE=rtlsdrv4 \
            --push \
            -t ${{ env.REGISTRY_IMAGE }}:sdr_light_rtlsdrv4 \
            -f Dockerfiles/SDR/sdr_light.docker \
            .

  reversing:
    runs-on: ubuntu-latest
    needs: corebuild
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          install: true

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Configure AWS Profile
        run: |
          mkdir -p ~/.aws && touch ~/.aws/credentials
          cat << EOT > ~/.aws/credentials
          [srv_gha]
          aws_access_key_id=${{ secrets.SRV_GHA_AWS_ACCESS_KEY_ID }}
          aws_secret_access_key=${{ secrets.SRV_GHA_AWS_SECRET_ACCESS_KEY }}
          EOT

      - name: Configure AWS Config
        run: |
          mkdir -p ~/.aws && touch ~/.aws/config
          cat << EOT > ~/.aws/config
          [default]
          region = ${{ env.S3_REGION }}
          output = json
          EOT

      - name: Build and push reversing image with caching
        run: |
          export AWS_BUCKET=${{ env.S3_BUCKET }}
          docker buildx build --platform ${{ env.BUILD_PLATFORMS }} \
            --cache-from=type=s3,ref=${AWS_BUCKET}/cache/reversing,endpoint=${{ env.S3_ENDPOINT }} \
            --cache-to=type=s3,ref=${AWS_BUCKET}/cache/reversing,mode=max,endpoint=${{ env.S3_ENDPOINT }} \
            --build-arg BASE_IMAGE=${{ env.REGISTRY_IMAGE }}:corebuild \
            --push \
            -t ${{ env.REGISTRY_IMAGE }}:reversing \
            -f Dockerfiles/reversing.docker \
            .

  sdr_light:
    runs-on: ubuntu-latest
    needs: corebuild
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          install: true

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Configure AWS Profile
        run: |
          mkdir -p ~/.aws && touch ~/.aws/credentials
          cat << EOT > ~/.aws/credentials
          [srv_gha]
          aws_access_key_id=${{ secrets.SRV_GHA_AWS_ACCESS_KEY_ID }}
          aws_secret_access_key=${{ secrets.SRV_GHA_AWS_SECRET_ACCESS_KEY }}
          EOT

      - name: Configure AWS Config
        run: |
          mkdir -p ~/.aws && touch ~/.aws/config
          cat << EOT > ~/.aws/config
          [default]
          region = ${{ env.S3_REGION }}
          output = json
          EOT

      - name: Build and push sdr_light image with caching
        run: |
          export AWS_BUCKET=${{ env.S3_BUCKET }}
          docker buildx build --platform ${{ env.BUILD_PLATFORMS }} \
            --cache-from=type=s3,ref=${AWS_BUCKET}/cache/sdr_light,endpoint=${{ env.S3_ENDPOINT }} \
            --cache-to=type=s3,ref=${AWS_BUCKET}/cache/sdr_light,mode=max,endpoint=${{ env.S3_ENDPOINT }} \
            --build-arg BASE_IMAGE=${{ env.REGISTRY_IMAGE }}:corebuild \
            --build-arg UHD_BASE=uhd \
            --build-arg RTLSDR_BASE=rtlsdr \
            --push \
            -t ${{ env.REGISTRY_IMAGE }}:sdr_light \
            -f Dockerfiles/SDR/sdr_light.docker \
            .

  sdr_full:
    runs-on: ubuntu-latest
    needs: sdr_light
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          install: true

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Configure AWS Profile
        run: |
          mkdir -p ~/.aws && touch ~/.aws/credentials
          cat << EOT > ~/.aws/credentials
          [srv_gha]
          aws_access_key_id=${{ secrets.SRV_GHA_AWS_ACCESS_KEY_ID }}
          aws_secret_access_key=${{ secrets.SRV_GHA_AWS_SECRET_ACCESS_KEY }}
          EOT

      - name: Configure AWS Config
        run: |
          mkdir -p ~/.aws && touch ~/.aws/config
          cat << EOT > ~/.aws/config
          [default]
          region = ${{ env.S3_REGION }}
          output = json
          EOT

      - name: Build and push sdr_full image with caching
        run: |
          export AWS_BUCKET=${{ env.S3_BUCKET }}
          docker buildx build --platform ${{ env.BUILD_PLATFORMS }} \
            --cache-from=type=s3,ref=${AWS_BUCKET}/cache/sdr_full,endpoint=${{ env.S3_ENDPOINT }} \
            --cache-to=type=s3,ref=${AWS_BUCKET}/cache/sdr_full,mode=max,endpoint=${{ env.S3_ENDPOINT }} \
            --build-arg BASE_IMAGE=${{ env.REGISTRY_IMAGE }}:sdr_light \
            --push \
            -t ${{ env.REGISTRY_IMAGE }}:sdr_full \
            -f Dockerfiles/SDR/sdr_full.docker \
            .

  rfid:
    runs-on: ubuntu-latest
    needs: corebuild
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          install: true

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Configure AWS Profile
        run: |
          mkdir -p ~/.aws && touch ~/.aws/credentials
          cat << EOT > ~/.aws/credentials
          [srv_gha]
          aws_access_key_id=${{ secrets.SRV_GHA_AWS_ACCESS_KEY_ID }}
          aws_secret_access_key=${{ secrets.SRV_GHA_AWS_SECRET_ACCESS_KEY }}
          EOT

      - name: Configure AWS Config
        run: |
          mkdir -p ~/.aws && touch ~/.aws/config
          cat << EOT > ~/.aws/config
          [default]
          region = ${{ env.S3_REGION }}
          output = json
          EOT

      - name: Build and push rfid image with caching
        run: |
          export AWS_BUCKET=${{ env.S3_BUCKET }}
          docker buildx build --platform ${{ env.BUILD_PLATFORMS }} \
            --cache-from=type=s3,ref=${AWS_BUCKET}/cache/rfid,endpoint=${{ env.S3_ENDPOINT }} \
            --cache-to=type=s3,ref=${AWS_BUCKET}/cache/rfid,mode=max,endpoint=${{ env.S3_ENDPOINT }} \
            --build-arg BASE_IMAGE=${{ env.REGISTRY_IMAGE }}:corebuild \
            --push \
            -t ${{ env.REGISTRY_IMAGE }}:rfid \
            -f Dockerfiles/rfid.docker \
            .

  wifi:
    runs-on: ubuntu-latest
    needs: sdr_light
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          install: true

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Configure AWS Profile
        run: |
          mkdir -p ~/.aws && touch ~/.aws/credentials
          cat << EOT > ~/.aws/credentials
          [srv_gha]
          aws_access_key_id=${{ secrets.SRV_GHA_AWS_ACCESS_KEY_ID }}
          aws_secret_access_key=${{ secrets.SRV_GHA_AWS_SECRET_ACCESS_KEY }}
          EOT

      - name: Configure AWS Config
        run: |
          mkdir -p ~/.aws && touch ~/.aws/config
          cat << EOT > ~/.aws/config
          [default]
          region = ${{ env.S3_REGION }}
          output = json
          EOT

      - name: Build and push wifi image with caching
        run: |
          export AWS_BUCKET=${{ env.S3_BUCKET }}
          docker buildx build --platform ${{ env.BUILD_PLATFORMS }} \
            --cache-from=type=s3,ref=${AWS_BUCKET}/cache/wifi,endpoint=${{ env.S3_ENDPOINT }} \
            --cache-to=type=s3,ref=${AWS_BUCKET}/cache/wifi,mode=max,endpoint=${{ env.S3_ENDPOINT }} \
            --build-arg BASE_IMAGE=${{ env.REGISTRY_IMAGE }}:sdr_light \
            --push \
            -t ${{ env.REGISTRY_IMAGE }}:wifi \
            -f Dockerfiles/wifi.docker \
            .

  bluetooth:
    runs-on: ubuntu-latest
    needs: sdr_light
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          install: true

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Configure AWS Profile
        run: |
          mkdir -p ~/.aws && touch ~/.aws/credentials
          cat << EOT > ~/.aws/credentials
          [srv_gha]
          aws_access_key_id=${{ secrets.SRV_GHA_AWS_ACCESS_KEY_ID }}
          aws_secret_access_key=${{ secrets.SRV_GHA_AWS_SECRET_ACCESS_KEY }}
          EOT

      - name: Configure AWS Config
        run: |
          mkdir -p ~/.aws && touch ~/.aws/config
          cat << EOT > ~/.aws/config
          [default]
          region = ${{ env.S3_REGION }}
          output = json
          EOT

      - name: Build and push bluetooth image with caching
        run: |
          export AWS_BUCKET=${{ env.S3_BUCKET }}
          docker buildx build --platform ${{ env.BUILD_PLATFORMS }} \
            --cache-from=type=s3,ref=${AWS_BUCKET}/cache/bluetooth,endpoint=${{ env.S3_ENDPOINT }} \
            --cache-to=type=s3,ref=${AWS_BUCKET}/cache/bluetooth,mode=max,endpoint=${{ env.S3_ENDPOINT }} \
            --build-arg BASE_IMAGE=${{ env.REGISTRY_IMAGE }}:sdr_light \
            --push \
            -t ${{ env.REGISTRY_IMAGE }}:bluetooth \
            -f Dockerfiles/bluetooth.docker \
            .

  sdr_deeptemptest_beta:
    runs-on: ubuntu-latest
    needs: sdr_light
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          install: true

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Configure AWS Profile
        run: |
          mkdir -p ~/.aws && touch ~/.aws/credentials
          cat << EOT > ~/.aws/credentials
          [srv_gha]
          aws_access_key_id=${{ secrets.SRV_GHA_AWS_ACCESS_KEY_ID }}
          aws_secret_access_key=${{ secrets.SRV_GHA_AWS_SECRET_ACCESS_KEY }}
          EOT

      - name: Configure AWS Config
        run: |
          mkdir -p ~/.aws && touch ~/.aws/config
          cat << EOT > ~/.aws/config
          [default]
          region = ${{ env.S3_REGION }}
          output = json
          EOT

      - name: Build and push sdr_deeptemptest_beta image with caching
        run: |
          export AWS_BUCKET=${{ env.S3_BUCKET }}
          docker buildx build --platform ${{ env.BUILD_PLATFORMS }} \
            --cache-from=type=s3,ref=${AWS_BUCKET}/cache/sdr_deeptemptest_beta,endpoint=${{ env.S3_ENDPOINT }} \
            --cache-to=type=s3,ref=${AWS_BUCKET}/cache/sdr_deeptemptest_beta,mode=max,endpoint=${{ env.S3_ENDPOINT }} \
            --build-arg BASE_IMAGE=${{ env.REGISTRY_IMAGE }}:sdr_light \
            --push \
            -t ${{ env.REGISTRY_IMAGE }}:sdr_deeptemptest_beta \
            -f Dockerfiles/SDR/sdr_deeptemptest_beta.docker \
            .