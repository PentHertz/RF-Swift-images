name: SDR full - Multi-Platform Docker Build with Caching

env:
  REGISTRY_IMAGE: penthertz/rfswiftdev
  BUILD_PLATFORMS: linux/amd64,linux/arm64
  CACHE_PLATFORMS: linux_amd64-linux_arm64
  CACHE_REPO: penthertz/rfswiftdev
  DO_SPACES_ENDPOINT: ${{ secrets.BUCKET_URL }}
  DO_SPACES_REGION: ${{ secrets.BUCKET_REGION }}

on:
  push:
    branches:
      - main

jobs:
  corebuild:
    runs-on:
      group: Supergroup
      labels: super-runner
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          install: true
          version: latest

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push corebuild image with caching
        run: |
          docker buildx build --platform ${{ env.BUILD_PLATFORMS }} \
            --cache-from=type=registry,ref=${{ env.CACHE_REPO }}:cache_corebuild \
            --cache-to=type=registry,ref=${{ env.CACHE_REPO }}:cache_corebuild,mode=max \
            --push \
            -t ${{ env.REGISTRY_IMAGE }}:corebuild \
            -f Dockerfiles/SDR/corebuild.docker \
            .

  sdr_light:
    runs-on: ubuntu-latest
    needs: corebuild
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          install: true

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push sdr_light image with caching
        run: |
          docker buildx build --platform ${{ env.BUILD_PLATFORMS }} \
            --cache-from=type=registry,ref=${{ env.CACHE_REPO }}:cache_sdr_light \
            --cache-to=type=registry,ref=${{ env.CACHE_REPO }}:cache_sdr_light,mode=max \
            --build-arg BASE_IMAGE=${{ env.REGISTRY_IMAGE }}:corebuild \
            --build-arg UHD_BASE=uhd \
            --build-arg RTLSDR_BASE=rtlsdr \
            --push \
            -t ${{ env.REGISTRY_IMAGE }}:sdr_light \
            -f Dockerfiles/SDR/sdr_light.docker \
            .

  sdr_full:
    runs-on: ubuntu-latest
    needs: sdr_light
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          install: true

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push sdr_full image with caching
        run: |
          docker buildx build --platform ${{ env.BUILD_PLATFORMS }} \
            --cache-from=type=registry,ref=${{ env.CACHE_REPO }}:cache_sdr_full \
            --cache-to=type=registry,ref=${{ env.CACHE_REPO }}:cache_sdr_full,mode=max \
            --build-arg BASE_IMAGE=${{ env.REGISTRY_IMAGE }}:sdr_light \
            --push \
            -t ${{ env.REGISTRY_IMAGE }}:sdr_full \
            -f Dockerfiles/SDR/sdr_full.docker \
            .